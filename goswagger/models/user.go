// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// User user
//
// swagger:model User
type User struct {

	// admin scope
	// Example: false
	AdminScope bool `json:"adminScope,omitempty"`

	// edges
	Edges *UserEdges `json:"edges,omitempty"`

	// first name
	// Example: GaÃ«tan
	FirstName string `json:"firstName,omitempty"`

	// hours done
	// Example: 6
	HoursDone int64 `json:"hoursDone,omitempty"`

	// id
	// Example: 123e4567-e89b-12d3-a456-426614174000
	// Read Only: true
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// last name
	// Example: Marchal
	LastName string `json:"lastName,omitempty"`

	// login
	// Example: gamarcha
	// Min Length: 2
	Login string `json:"login,omitempty"`

	// tutor scope
	// Example: true
	TutorScope bool `json:"tutorScope,omitempty"`
}

// Validate validates this user
func (m *User) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEdges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogin(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *User) validateEdges(formats strfmt.Registry) error {
	if swag.IsZero(m.Edges) { // not required
		return nil
	}

	if m.Edges != nil {
		if err := m.Edges.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("edges")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("edges")
			}
			return err
		}
	}

	return nil
}

func (m *User) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *User) validateLogin(formats strfmt.Registry) error {
	if swag.IsZero(m.Login) { // not required
		return nil
	}

	if err := validate.MinLength("login", "body", m.Login, 2); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this user based on the context it is used
func (m *User) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEdges(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *User) contextValidateEdges(ctx context.Context, formats strfmt.Registry) error {

	if m.Edges != nil {
		if err := m.Edges.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("edges")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("edges")
			}
			return err
		}
	}

	return nil
}

func (m *User) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", strfmt.UUID(m.ID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *User) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *User) UnmarshalBinary(b []byte) error {
	var res User
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
