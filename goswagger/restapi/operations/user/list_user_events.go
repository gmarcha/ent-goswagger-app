// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ListUserEventsHandlerFunc turns a function with the right signature into a list user events handler
type ListUserEventsHandlerFunc func(ListUserEventsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListUserEventsHandlerFunc) Handle(params ListUserEventsParams) middleware.Responder {
	return fn(params)
}

// ListUserEventsHandler interface for that can handle valid list user events params
type ListUserEventsHandler interface {
	Handle(ListUserEventsParams) middleware.Responder
}

// NewListUserEvents creates a new http.Handler for the list user events operation
func NewListUserEvents(ctx *middleware.Context, handler ListUserEventsHandler) *ListUserEvents {
	return &ListUserEvents{Context: ctx, Handler: handler}
}

/* ListUserEvents swagger:route GET /users/{id}/events User listUserEvents

List user events

List user's subscribed events.

*/
type ListUserEvents struct {
	Context *middleware.Context
	Handler ListUserEventsHandler
}

func (o *ListUserEvents) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewListUserEventsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
