// Code generated by entc, DO NOT EDIT.

package event

import (
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the event type in the database.
	Label = "event"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldTutorsRequired holds the string denoting the tutorsrequired field in the database.
	FieldTutorsRequired = "tutors_required"
	// FieldTutorsSubscribed holds the string denoting the tutorssubscribed field in the database.
	FieldTutorsSubscribed = "tutors_subscribed"
	// FieldWalletsRewards holds the string denoting the walletsrewards field in the database.
	FieldWalletsRewards = "wallets_rewards"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// FieldStartAt holds the string denoting the startat field in the database.
	FieldStartAt = "start_at"
	// FieldEndAt holds the string denoting the endat field in the database.
	FieldEndAt = "end_at"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// Table holds the table name of the event in the database.
	Table = "events"
	// UsersTable is the table that holds the users relation/edge. The primary key declared below.
	UsersTable = "event_users"
	// UsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersInverseTable = "users"
)

// Columns holds all SQL columns for event fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldTutorsRequired,
	FieldTutorsSubscribed,
	FieldWalletsRewards,
	FieldCreatedAt,
	FieldStartAt,
	FieldEndAt,
}

var (
	// UsersPrimaryKey and UsersColumn2 are the table columns denoting the
	// primary key for the users relation (M2M).
	UsersPrimaryKey = []string{"event_id", "user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TutorsRequiredValidator is a validator for the "tutorsRequired" field. It is called by the builders before save.
	TutorsRequiredValidator func(int64) error
	// TutorsSubscribedValidator is a validator for the "tutorsSubscribed" field. It is called by the builders before save.
	TutorsSubscribedValidator func(int64) error
	// WalletsRewardsValidator is a validator for the "walletsRewards" field. It is called by the builders before save.
	WalletsRewardsValidator func(int64) error
	// DefaultCreatedAt holds the default value on creation for the "createdAt" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
