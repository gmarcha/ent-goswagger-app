// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gmarcha/ent-goswagger-app/internal/ent/event"
	"github.com/gmarcha/ent-goswagger-app/internal/ent/eventtype"
	"github.com/gmarcha/ent-goswagger-app/internal/ent/predicate"
	"github.com/google/uuid"
)

// EventTypeUpdate is the builder for updating EventType entities.
type EventTypeUpdate struct {
	config
	hooks    []Hook
	mutation *EventTypeMutation
}

// Where appends a list predicates to the EventTypeUpdate builder.
func (etu *EventTypeUpdate) Where(ps ...predicate.EventType) *EventTypeUpdate {
	etu.mutation.Where(ps...)
	return etu
}

// SetName sets the "name" field.
func (etu *EventTypeUpdate) SetName(s string) *EventTypeUpdate {
	etu.mutation.SetName(s)
	return etu
}

// SetColor sets the "color" field.
func (etu *EventTypeUpdate) SetColor(s string) *EventTypeUpdate {
	etu.mutation.SetColor(s)
	return etu
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (etu *EventTypeUpdate) AddEventIDs(ids ...uuid.UUID) *EventTypeUpdate {
	etu.mutation.AddEventIDs(ids...)
	return etu
}

// AddEvents adds the "events" edges to the Event entity.
func (etu *EventTypeUpdate) AddEvents(e ...*Event) *EventTypeUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return etu.AddEventIDs(ids...)
}

// Mutation returns the EventTypeMutation object of the builder.
func (etu *EventTypeUpdate) Mutation() *EventTypeMutation {
	return etu.mutation
}

// ClearEvents clears all "events" edges to the Event entity.
func (etu *EventTypeUpdate) ClearEvents() *EventTypeUpdate {
	etu.mutation.ClearEvents()
	return etu
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (etu *EventTypeUpdate) RemoveEventIDs(ids ...uuid.UUID) *EventTypeUpdate {
	etu.mutation.RemoveEventIDs(ids...)
	return etu
}

// RemoveEvents removes "events" edges to Event entities.
func (etu *EventTypeUpdate) RemoveEvents(e ...*Event) *EventTypeUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return etu.RemoveEventIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (etu *EventTypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(etu.hooks) == 0 {
		affected, err = etu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EventTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			etu.mutation = mutation
			affected, err = etu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(etu.hooks) - 1; i >= 0; i-- {
			if etu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = etu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, etu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (etu *EventTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := etu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (etu *EventTypeUpdate) Exec(ctx context.Context) error {
	_, err := etu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (etu *EventTypeUpdate) ExecX(ctx context.Context) {
	if err := etu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (etu *EventTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   eventtype.Table,
			Columns: eventtype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: eventtype.FieldID,
			},
		},
	}
	if ps := etu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := etu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: eventtype.FieldName,
		})
	}
	if value, ok := etu.mutation.Color(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: eventtype.FieldColor,
		})
	}
	if etu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   eventtype.EventsTable,
			Columns: []string{eventtype.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etu.mutation.RemovedEventsIDs(); len(nodes) > 0 && !etu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   eventtype.EventsTable,
			Columns: []string{eventtype.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etu.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   eventtype.EventsTable,
			Columns: []string{eventtype.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, etu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{eventtype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// EventTypeUpdateOne is the builder for updating a single EventType entity.
type EventTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EventTypeMutation
}

// SetName sets the "name" field.
func (etuo *EventTypeUpdateOne) SetName(s string) *EventTypeUpdateOne {
	etuo.mutation.SetName(s)
	return etuo
}

// SetColor sets the "color" field.
func (etuo *EventTypeUpdateOne) SetColor(s string) *EventTypeUpdateOne {
	etuo.mutation.SetColor(s)
	return etuo
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (etuo *EventTypeUpdateOne) AddEventIDs(ids ...uuid.UUID) *EventTypeUpdateOne {
	etuo.mutation.AddEventIDs(ids...)
	return etuo
}

// AddEvents adds the "events" edges to the Event entity.
func (etuo *EventTypeUpdateOne) AddEvents(e ...*Event) *EventTypeUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return etuo.AddEventIDs(ids...)
}

// Mutation returns the EventTypeMutation object of the builder.
func (etuo *EventTypeUpdateOne) Mutation() *EventTypeMutation {
	return etuo.mutation
}

// ClearEvents clears all "events" edges to the Event entity.
func (etuo *EventTypeUpdateOne) ClearEvents() *EventTypeUpdateOne {
	etuo.mutation.ClearEvents()
	return etuo
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (etuo *EventTypeUpdateOne) RemoveEventIDs(ids ...uuid.UUID) *EventTypeUpdateOne {
	etuo.mutation.RemoveEventIDs(ids...)
	return etuo
}

// RemoveEvents removes "events" edges to Event entities.
func (etuo *EventTypeUpdateOne) RemoveEvents(e ...*Event) *EventTypeUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return etuo.RemoveEventIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (etuo *EventTypeUpdateOne) Select(field string, fields ...string) *EventTypeUpdateOne {
	etuo.fields = append([]string{field}, fields...)
	return etuo
}

// Save executes the query and returns the updated EventType entity.
func (etuo *EventTypeUpdateOne) Save(ctx context.Context) (*EventType, error) {
	var (
		err  error
		node *EventType
	)
	if len(etuo.hooks) == 0 {
		node, err = etuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EventTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			etuo.mutation = mutation
			node, err = etuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(etuo.hooks) - 1; i >= 0; i-- {
			if etuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = etuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, etuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (etuo *EventTypeUpdateOne) SaveX(ctx context.Context) *EventType {
	node, err := etuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (etuo *EventTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := etuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (etuo *EventTypeUpdateOne) ExecX(ctx context.Context) {
	if err := etuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (etuo *EventTypeUpdateOne) sqlSave(ctx context.Context) (_node *EventType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   eventtype.Table,
			Columns: eventtype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: eventtype.FieldID,
			},
		},
	}
	id, ok := etuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EventType.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := etuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, eventtype.FieldID)
		for _, f := range fields {
			if !eventtype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != eventtype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := etuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := etuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: eventtype.FieldName,
		})
	}
	if value, ok := etuo.mutation.Color(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: eventtype.FieldColor,
		})
	}
	if etuo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   eventtype.EventsTable,
			Columns: []string{eventtype.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etuo.mutation.RemovedEventsIDs(); len(nodes) > 0 && !etuo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   eventtype.EventsTable,
			Columns: []string{eventtype.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etuo.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   eventtype.EventsTable,
			Columns: []string{eventtype.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EventType{config: etuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, etuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{eventtype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
