// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/gmarcha/ent-goswagger-app/internal/ent/eventtype"
	"github.com/go-openapi/strfmt"
	"github.com/google/uuid"
)

// EventType is the model entity for the EventType schema.
type EventType struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Color holds the value of the "color" field.
	Color string `json:"color,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EventTypeQuery when eager-loading is set.
	Edges EventTypeEdges `json:"edges"`
}

// EventTypeEdges holds the relations/edges for other nodes in the graph.
type EventTypeEdges struct {
	// Events holds the value of the events edge.
	Events []*Event `json:"events,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EventsOrErr returns the Events value or an error if the edge
// was not loaded in eager-loading.
func (e EventTypeEdges) EventsOrErr() ([]*Event, error) {
	if e.loadedTypes[0] {
		return e.Events, nil
	}
	return nil, &NotLoadedError{edge: "events"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EventType) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case eventtype.FieldName, eventtype.FieldColor:
			values[i] = new(sql.NullString)
		case eventtype.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type EventType", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EventType fields.
func (et *EventType) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case eventtype.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				et.ID = *value
			}
		case eventtype.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				et.Name = value.String
			}
		case eventtype.FieldColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field color", values[i])
			} else if value.Valid {
				et.Color = value.String
			}
		}
	}
	return nil
}

// QueryEvents queries the "events" edge of the EventType entity.
func (et *EventType) QueryEvents() *EventQuery {
	return (&EventTypeClient{config: et.config}).QueryEvents(et)
}

// Update returns a builder for updating this EventType.
// Note that you need to call EventType.Unwrap() before calling this method if this EventType
// was returned from a transaction, and the transaction was committed or rolled back.
func (et *EventType) Update() *EventTypeUpdateOne {
	return (&EventTypeClient{config: et.config}).UpdateOne(et)
}

// Unwrap unwraps the EventType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (et *EventType) Unwrap() *EventType {
	tx, ok := et.config.driver.(*txDriver)
	if !ok {
		panic("ent: EventType is not a transactional entity")
	}
	et.config.driver = tx.drv
	return et
}

// String implements the fmt.Stringer.
func (et *EventType) String() string {
	var builder strings.Builder
	builder.WriteString("EventType(")
	builder.WriteString(fmt.Sprintf("id=%v", et.ID))
	builder.WriteString(", name=")
	builder.WriteString(et.Name)
	builder.WriteString(", color=")
	builder.WriteString(et.Color)
	builder.WriteByte(')')
	return builder.String()
}

// Validate method is mandatory for Go Swagger generated server code to compile.
func (et *EventType) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate method is implemented to discard code editor errors.
func (et *EventType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// EventTypes is a parsable slice of EventType.
type EventTypes []*EventType

func (et EventTypes) config(cfg config) {
	for _i := range et {
		et[_i].config = cfg
	}
}
