// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/gmarcha/ent-goswagger-app/internal/ent"
	"github.com/gmarcha/ent-goswagger-app/internal/goswagger/models"
)

// SubscribeUserCreatedCode is the HTTP code returned for type SubscribeUserCreated
const SubscribeUserCreatedCode int = 201

/*SubscribeUserCreated Created

swagger:response subscribeUserCreated
*/
type SubscribeUserCreated struct {

	/*
	  In: Body
	*/
	Payload []*ent.Event `json:"body,omitempty"`
}

// NewSubscribeUserCreated creates SubscribeUserCreated with default headers values
func NewSubscribeUserCreated() *SubscribeUserCreated {

	return &SubscribeUserCreated{}
}

// WithPayload adds the payload to the subscribe user created response
func (o *SubscribeUserCreated) WithPayload(payload []*ent.Event) *SubscribeUserCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the subscribe user created response
func (o *SubscribeUserCreated) SetPayload(payload []*ent.Event) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SubscribeUserCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*ent.Event, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// SubscribeUserBadRequestCode is the HTTP code returned for type SubscribeUserBadRequest
const SubscribeUserBadRequestCode int = 400

/*SubscribeUserBadRequest Bad request

swagger:response subscribeUserBadRequest
*/
type SubscribeUserBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewSubscribeUserBadRequest creates SubscribeUserBadRequest with default headers values
func NewSubscribeUserBadRequest() *SubscribeUserBadRequest {

	return &SubscribeUserBadRequest{}
}

// WithPayload adds the payload to the subscribe user bad request response
func (o *SubscribeUserBadRequest) WithPayload(payload *models.Error) *SubscribeUserBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the subscribe user bad request response
func (o *SubscribeUserBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SubscribeUserBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SubscribeUserUnauthorizedCode is the HTTP code returned for type SubscribeUserUnauthorized
const SubscribeUserUnauthorizedCode int = 401

/*SubscribeUserUnauthorized Unauthorized

swagger:response subscribeUserUnauthorized
*/
type SubscribeUserUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewSubscribeUserUnauthorized creates SubscribeUserUnauthorized with default headers values
func NewSubscribeUserUnauthorized() *SubscribeUserUnauthorized {

	return &SubscribeUserUnauthorized{}
}

// WithPayload adds the payload to the subscribe user unauthorized response
func (o *SubscribeUserUnauthorized) WithPayload(payload *models.Error) *SubscribeUserUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the subscribe user unauthorized response
func (o *SubscribeUserUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SubscribeUserUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SubscribeUserForbiddenCode is the HTTP code returned for type SubscribeUserForbidden
const SubscribeUserForbiddenCode int = 403

/*SubscribeUserForbidden Forbidden

swagger:response subscribeUserForbidden
*/
type SubscribeUserForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewSubscribeUserForbidden creates SubscribeUserForbidden with default headers values
func NewSubscribeUserForbidden() *SubscribeUserForbidden {

	return &SubscribeUserForbidden{}
}

// WithPayload adds the payload to the subscribe user forbidden response
func (o *SubscribeUserForbidden) WithPayload(payload *models.Error) *SubscribeUserForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the subscribe user forbidden response
func (o *SubscribeUserForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SubscribeUserForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SubscribeUserNotFoundCode is the HTTP code returned for type SubscribeUserNotFound
const SubscribeUserNotFoundCode int = 404

/*SubscribeUserNotFound Not Found

swagger:response subscribeUserNotFound
*/
type SubscribeUserNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewSubscribeUserNotFound creates SubscribeUserNotFound with default headers values
func NewSubscribeUserNotFound() *SubscribeUserNotFound {

	return &SubscribeUserNotFound{}
}

// WithPayload adds the payload to the subscribe user not found response
func (o *SubscribeUserNotFound) WithPayload(payload *models.Error) *SubscribeUserNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the subscribe user not found response
func (o *SubscribeUserNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SubscribeUserNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SubscribeUserInternalServerErrorCode is the HTTP code returned for type SubscribeUserInternalServerError
const SubscribeUserInternalServerErrorCode int = 500

/*SubscribeUserInternalServerError Internal Server Error

swagger:response subscribeUserInternalServerError
*/
type SubscribeUserInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewSubscribeUserInternalServerError creates SubscribeUserInternalServerError with default headers values
func NewSubscribeUserInternalServerError() *SubscribeUserInternalServerError {

	return &SubscribeUserInternalServerError{}
}

// WithPayload adds the payload to the subscribe user internal server error response
func (o *SubscribeUserInternalServerError) WithPayload(payload *models.Error) *SubscribeUserInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the subscribe user internal server error response
func (o *SubscribeUserInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SubscribeUserInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
