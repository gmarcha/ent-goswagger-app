// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/gmarcha/ent-goswagger-app/internal/goswagger/models"
)

// RemoveRoleNoContentCode is the HTTP code returned for type RemoveRoleNoContent
const RemoveRoleNoContentCode int = 204

/*RemoveRoleNoContent No Content

swagger:response removeRoleNoContent
*/
type RemoveRoleNoContent struct {
}

// NewRemoveRoleNoContent creates RemoveRoleNoContent with default headers values
func NewRemoveRoleNoContent() *RemoveRoleNoContent {

	return &RemoveRoleNoContent{}
}

// WriteResponse to the client
func (o *RemoveRoleNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

// RemoveRoleBadRequestCode is the HTTP code returned for type RemoveRoleBadRequest
const RemoveRoleBadRequestCode int = 400

/*RemoveRoleBadRequest Bad request

swagger:response removeRoleBadRequest
*/
type RemoveRoleBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewRemoveRoleBadRequest creates RemoveRoleBadRequest with default headers values
func NewRemoveRoleBadRequest() *RemoveRoleBadRequest {

	return &RemoveRoleBadRequest{}
}

// WithPayload adds the payload to the remove role bad request response
func (o *RemoveRoleBadRequest) WithPayload(payload *models.Error) *RemoveRoleBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the remove role bad request response
func (o *RemoveRoleBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RemoveRoleBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RemoveRoleNotFoundCode is the HTTP code returned for type RemoveRoleNotFound
const RemoveRoleNotFoundCode int = 404

/*RemoveRoleNotFound Not Found

swagger:response removeRoleNotFound
*/
type RemoveRoleNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewRemoveRoleNotFound creates RemoveRoleNotFound with default headers values
func NewRemoveRoleNotFound() *RemoveRoleNotFound {

	return &RemoveRoleNotFound{}
}

// WithPayload adds the payload to the remove role not found response
func (o *RemoveRoleNotFound) WithPayload(payload *models.Error) *RemoveRoleNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the remove role not found response
func (o *RemoveRoleNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RemoveRoleNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RemoveRoleInternalServerErrorCode is the HTTP code returned for type RemoveRoleInternalServerError
const RemoveRoleInternalServerErrorCode int = 500

/*RemoveRoleInternalServerError Internal Server Error

swagger:response removeRoleInternalServerError
*/
type RemoveRoleInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewRemoveRoleInternalServerError creates RemoveRoleInternalServerError with default headers values
func NewRemoveRoleInternalServerError() *RemoveRoleInternalServerError {

	return &RemoveRoleInternalServerError{}
}

// WithPayload adds the payload to the remove role internal server error response
func (o *RemoveRoleInternalServerError) WithPayload(payload *models.Error) *RemoveRoleInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the remove role internal server error response
func (o *RemoveRoleInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RemoveRoleInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
