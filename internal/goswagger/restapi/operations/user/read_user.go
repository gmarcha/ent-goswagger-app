// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/gmarcha/ent-goswagger-app/internal/goswagger/models"
)

// ReadUserHandlerFunc turns a function with the right signature into a read user handler
type ReadUserHandlerFunc func(ReadUserParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn ReadUserHandlerFunc) Handle(params ReadUserParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// ReadUserHandler interface for that can handle valid read user params
type ReadUserHandler interface {
	Handle(ReadUserParams, *models.Principal) middleware.Responder
}

// NewReadUser creates a new http.Handler for the read user operation
func NewReadUser(ctx *middleware.Context, handler ReadUserHandler) *ReadUser {
	return &ReadUser{Context: ctx, Handler: handler}
}

/* ReadUser swagger:route GET /users/{id} User readUser

Read user

Read an user by ID.

*/
type ReadUser struct {
	Context *middleware.Context
	Handler ReadUserHandler
}

func (o *ReadUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewReadUserParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
