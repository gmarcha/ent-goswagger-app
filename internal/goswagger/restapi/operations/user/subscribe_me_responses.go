// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/gmarcha/ent-goswagger-app/internal/ent"
	"github.com/gmarcha/ent-goswagger-app/internal/goswagger/models"
)

// SubscribeMeCreatedCode is the HTTP code returned for type SubscribeMeCreated
const SubscribeMeCreatedCode int = 201

/*SubscribeMeCreated Created

swagger:response subscribeMeCreated
*/
type SubscribeMeCreated struct {

	/*
	  In: Body
	*/
	Payload []*ent.Event `json:"body,omitempty"`
}

// NewSubscribeMeCreated creates SubscribeMeCreated with default headers values
func NewSubscribeMeCreated() *SubscribeMeCreated {

	return &SubscribeMeCreated{}
}

// WithPayload adds the payload to the subscribe me created response
func (o *SubscribeMeCreated) WithPayload(payload []*ent.Event) *SubscribeMeCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the subscribe me created response
func (o *SubscribeMeCreated) SetPayload(payload []*ent.Event) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SubscribeMeCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*ent.Event, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// SubscribeMeBadRequestCode is the HTTP code returned for type SubscribeMeBadRequest
const SubscribeMeBadRequestCode int = 400

/*SubscribeMeBadRequest Bad request

swagger:response subscribeMeBadRequest
*/
type SubscribeMeBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewSubscribeMeBadRequest creates SubscribeMeBadRequest with default headers values
func NewSubscribeMeBadRequest() *SubscribeMeBadRequest {

	return &SubscribeMeBadRequest{}
}

// WithPayload adds the payload to the subscribe me bad request response
func (o *SubscribeMeBadRequest) WithPayload(payload *models.Error) *SubscribeMeBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the subscribe me bad request response
func (o *SubscribeMeBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SubscribeMeBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SubscribeMeUnauthorizedCode is the HTTP code returned for type SubscribeMeUnauthorized
const SubscribeMeUnauthorizedCode int = 401

/*SubscribeMeUnauthorized Unauthorized

swagger:response subscribeMeUnauthorized
*/
type SubscribeMeUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewSubscribeMeUnauthorized creates SubscribeMeUnauthorized with default headers values
func NewSubscribeMeUnauthorized() *SubscribeMeUnauthorized {

	return &SubscribeMeUnauthorized{}
}

// WithPayload adds the payload to the subscribe me unauthorized response
func (o *SubscribeMeUnauthorized) WithPayload(payload *models.Error) *SubscribeMeUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the subscribe me unauthorized response
func (o *SubscribeMeUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SubscribeMeUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SubscribeMeForbiddenCode is the HTTP code returned for type SubscribeMeForbidden
const SubscribeMeForbiddenCode int = 403

/*SubscribeMeForbidden Forbidden

swagger:response subscribeMeForbidden
*/
type SubscribeMeForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewSubscribeMeForbidden creates SubscribeMeForbidden with default headers values
func NewSubscribeMeForbidden() *SubscribeMeForbidden {

	return &SubscribeMeForbidden{}
}

// WithPayload adds the payload to the subscribe me forbidden response
func (o *SubscribeMeForbidden) WithPayload(payload *models.Error) *SubscribeMeForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the subscribe me forbidden response
func (o *SubscribeMeForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SubscribeMeForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SubscribeMeNotFoundCode is the HTTP code returned for type SubscribeMeNotFound
const SubscribeMeNotFoundCode int = 404

/*SubscribeMeNotFound Not Found

swagger:response subscribeMeNotFound
*/
type SubscribeMeNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewSubscribeMeNotFound creates SubscribeMeNotFound with default headers values
func NewSubscribeMeNotFound() *SubscribeMeNotFound {

	return &SubscribeMeNotFound{}
}

// WithPayload adds the payload to the subscribe me not found response
func (o *SubscribeMeNotFound) WithPayload(payload *models.Error) *SubscribeMeNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the subscribe me not found response
func (o *SubscribeMeNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SubscribeMeNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SubscribeMeInternalServerErrorCode is the HTTP code returned for type SubscribeMeInternalServerError
const SubscribeMeInternalServerErrorCode int = 500

/*SubscribeMeInternalServerError Internal Server Error

swagger:response subscribeMeInternalServerError
*/
type SubscribeMeInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewSubscribeMeInternalServerError creates SubscribeMeInternalServerError with default headers values
func NewSubscribeMeInternalServerError() *SubscribeMeInternalServerError {

	return &SubscribeMeInternalServerError{}
}

// WithPayload adds the payload to the subscribe me internal server error response
func (o *SubscribeMeInternalServerError) WithPayload(payload *models.Error) *SubscribeMeInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the subscribe me internal server error response
func (o *SubscribeMeInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SubscribeMeInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
