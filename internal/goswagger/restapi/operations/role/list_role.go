// Code generated by go-swagger; DO NOT EDIT.

package role

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/gmarcha/ent-goswagger-app/internal/goswagger/models"
)

// ListRoleHandlerFunc turns a function with the right signature into a list role handler
type ListRoleHandlerFunc func(ListRoleParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn ListRoleHandlerFunc) Handle(params ListRoleParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// ListRoleHandler interface for that can handle valid list role params
type ListRoleHandler interface {
	Handle(ListRoleParams, *models.Principal) middleware.Responder
}

// NewListRole creates a new http.Handler for the list role operation
func NewListRole(ctx *middleware.Context, handler ListRoleHandler) *ListRole {
	return &ListRole{Context: ctx, Handler: handler}
}

/* ListRole swagger:route GET /users/roles Role listRole

List roles

List all roles.

*/
type ListRole struct {
	Context *middleware.Context
	Handler ListRoleHandler
}

func (o *ListRole) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewListRoleParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
