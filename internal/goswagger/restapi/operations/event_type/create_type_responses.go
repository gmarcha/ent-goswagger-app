// Code generated by go-swagger; DO NOT EDIT.

package event_type

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/gmarcha/ent-goswagger-app/internal/ent"
	"github.com/gmarcha/ent-goswagger-app/internal/goswagger/models"
)

// CreateTypeCreatedCode is the HTTP code returned for type CreateTypeCreated
const CreateTypeCreatedCode int = 201

/*CreateTypeCreated Created

swagger:response createTypeCreated
*/
type CreateTypeCreated struct {

	/*
	  In: Body
	*/
	Payload *ent.EventType `json:"body,omitempty"`
}

// NewCreateTypeCreated creates CreateTypeCreated with default headers values
func NewCreateTypeCreated() *CreateTypeCreated {

	return &CreateTypeCreated{}
}

// WithPayload adds the payload to the create type created response
func (o *CreateTypeCreated) WithPayload(payload *ent.EventType) *CreateTypeCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create type created response
func (o *CreateTypeCreated) SetPayload(payload *ent.EventType) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateTypeCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateTypeBadRequestCode is the HTTP code returned for type CreateTypeBadRequest
const CreateTypeBadRequestCode int = 400

/*CreateTypeBadRequest Bad request

swagger:response createTypeBadRequest
*/
type CreateTypeBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateTypeBadRequest creates CreateTypeBadRequest with default headers values
func NewCreateTypeBadRequest() *CreateTypeBadRequest {

	return &CreateTypeBadRequest{}
}

// WithPayload adds the payload to the create type bad request response
func (o *CreateTypeBadRequest) WithPayload(payload *models.Error) *CreateTypeBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create type bad request response
func (o *CreateTypeBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateTypeBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateTypeUnauthorizedCode is the HTTP code returned for type CreateTypeUnauthorized
const CreateTypeUnauthorizedCode int = 401

/*CreateTypeUnauthorized Unauthorized

swagger:response createTypeUnauthorized
*/
type CreateTypeUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateTypeUnauthorized creates CreateTypeUnauthorized with default headers values
func NewCreateTypeUnauthorized() *CreateTypeUnauthorized {

	return &CreateTypeUnauthorized{}
}

// WithPayload adds the payload to the create type unauthorized response
func (o *CreateTypeUnauthorized) WithPayload(payload *models.Error) *CreateTypeUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create type unauthorized response
func (o *CreateTypeUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateTypeUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateTypeForbiddenCode is the HTTP code returned for type CreateTypeForbidden
const CreateTypeForbiddenCode int = 403

/*CreateTypeForbidden Forbidden

swagger:response createTypeForbidden
*/
type CreateTypeForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateTypeForbidden creates CreateTypeForbidden with default headers values
func NewCreateTypeForbidden() *CreateTypeForbidden {

	return &CreateTypeForbidden{}
}

// WithPayload adds the payload to the create type forbidden response
func (o *CreateTypeForbidden) WithPayload(payload *models.Error) *CreateTypeForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create type forbidden response
func (o *CreateTypeForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateTypeForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateTypeInternalServerErrorCode is the HTTP code returned for type CreateTypeInternalServerError
const CreateTypeInternalServerErrorCode int = 500

/*CreateTypeInternalServerError Internal Server Error

swagger:response createTypeInternalServerError
*/
type CreateTypeInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateTypeInternalServerError creates CreateTypeInternalServerError with default headers values
func NewCreateTypeInternalServerError() *CreateTypeInternalServerError {

	return &CreateTypeInternalServerError{}
}

// WithPayload adds the payload to the create type internal server error response
func (o *CreateTypeInternalServerError) WithPayload(payload *models.Error) *CreateTypeInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create type internal server error response
func (o *CreateTypeInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateTypeInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
