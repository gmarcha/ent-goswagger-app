// Code generated by go-swagger; DO NOT EDIT.

package event_type

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/gmarcha/ent-goswagger-app/internal/ent"
	"github.com/gmarcha/ent-goswagger-app/internal/goswagger/models"
)

// ReadTypeOKCode is the HTTP code returned for type ReadTypeOK
const ReadTypeOKCode int = 200

/*ReadTypeOK OK

swagger:response readTypeOK
*/
type ReadTypeOK struct {

	/*
	  In: Body
	*/
	Payload *ent.EventType `json:"body,omitempty"`
}

// NewReadTypeOK creates ReadTypeOK with default headers values
func NewReadTypeOK() *ReadTypeOK {

	return &ReadTypeOK{}
}

// WithPayload adds the payload to the read type o k response
func (o *ReadTypeOK) WithPayload(payload *ent.EventType) *ReadTypeOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the read type o k response
func (o *ReadTypeOK) SetPayload(payload *ent.EventType) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReadTypeOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReadTypeBadRequestCode is the HTTP code returned for type ReadTypeBadRequest
const ReadTypeBadRequestCode int = 400

/*ReadTypeBadRequest Bad request

swagger:response readTypeBadRequest
*/
type ReadTypeBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewReadTypeBadRequest creates ReadTypeBadRequest with default headers values
func NewReadTypeBadRequest() *ReadTypeBadRequest {

	return &ReadTypeBadRequest{}
}

// WithPayload adds the payload to the read type bad request response
func (o *ReadTypeBadRequest) WithPayload(payload *models.Error) *ReadTypeBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the read type bad request response
func (o *ReadTypeBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReadTypeBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReadTypeUnauthorizedCode is the HTTP code returned for type ReadTypeUnauthorized
const ReadTypeUnauthorizedCode int = 401

/*ReadTypeUnauthorized Unauthorized

swagger:response readTypeUnauthorized
*/
type ReadTypeUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewReadTypeUnauthorized creates ReadTypeUnauthorized with default headers values
func NewReadTypeUnauthorized() *ReadTypeUnauthorized {

	return &ReadTypeUnauthorized{}
}

// WithPayload adds the payload to the read type unauthorized response
func (o *ReadTypeUnauthorized) WithPayload(payload *models.Error) *ReadTypeUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the read type unauthorized response
func (o *ReadTypeUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReadTypeUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReadTypeForbiddenCode is the HTTP code returned for type ReadTypeForbidden
const ReadTypeForbiddenCode int = 403

/*ReadTypeForbidden Forbidden

swagger:response readTypeForbidden
*/
type ReadTypeForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewReadTypeForbidden creates ReadTypeForbidden with default headers values
func NewReadTypeForbidden() *ReadTypeForbidden {

	return &ReadTypeForbidden{}
}

// WithPayload adds the payload to the read type forbidden response
func (o *ReadTypeForbidden) WithPayload(payload *models.Error) *ReadTypeForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the read type forbidden response
func (o *ReadTypeForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReadTypeForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReadTypeNotFoundCode is the HTTP code returned for type ReadTypeNotFound
const ReadTypeNotFoundCode int = 404

/*ReadTypeNotFound Not Found

swagger:response readTypeNotFound
*/
type ReadTypeNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewReadTypeNotFound creates ReadTypeNotFound with default headers values
func NewReadTypeNotFound() *ReadTypeNotFound {

	return &ReadTypeNotFound{}
}

// WithPayload adds the payload to the read type not found response
func (o *ReadTypeNotFound) WithPayload(payload *models.Error) *ReadTypeNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the read type not found response
func (o *ReadTypeNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReadTypeNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReadTypeInternalServerErrorCode is the HTTP code returned for type ReadTypeInternalServerError
const ReadTypeInternalServerErrorCode int = 500

/*ReadTypeInternalServerError Internal Server Error

swagger:response readTypeInternalServerError
*/
type ReadTypeInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewReadTypeInternalServerError creates ReadTypeInternalServerError with default headers values
func NewReadTypeInternalServerError() *ReadTypeInternalServerError {

	return &ReadTypeInternalServerError{}
}

// WithPayload adds the payload to the read type internal server error response
func (o *ReadTypeInternalServerError) WithPayload(payload *models.Error) *ReadTypeInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the read type internal server error response
func (o *ReadTypeInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReadTypeInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
