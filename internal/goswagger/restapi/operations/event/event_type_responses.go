// Code generated by go-swagger; DO NOT EDIT.

package event

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/gmarcha/ent-goswagger-app/internal/ent"
	"github.com/gmarcha/ent-goswagger-app/internal/goswagger/models"
)

// EventTypeOKCode is the HTTP code returned for type EventTypeOK
const EventTypeOKCode int = 200

/*EventTypeOK OK

swagger:response eventTypeOK
*/
type EventTypeOK struct {

	/*
	  In: Body
	*/
	Payload *ent.EventType `json:"body,omitempty"`
}

// NewEventTypeOK creates EventTypeOK with default headers values
func NewEventTypeOK() *EventTypeOK {

	return &EventTypeOK{}
}

// WithPayload adds the payload to the event type o k response
func (o *EventTypeOK) WithPayload(payload *ent.EventType) *EventTypeOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the event type o k response
func (o *EventTypeOK) SetPayload(payload *ent.EventType) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *EventTypeOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// EventTypeBadRequestCode is the HTTP code returned for type EventTypeBadRequest
const EventTypeBadRequestCode int = 400

/*EventTypeBadRequest Bad request

swagger:response eventTypeBadRequest
*/
type EventTypeBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewEventTypeBadRequest creates EventTypeBadRequest with default headers values
func NewEventTypeBadRequest() *EventTypeBadRequest {

	return &EventTypeBadRequest{}
}

// WithPayload adds the payload to the event type bad request response
func (o *EventTypeBadRequest) WithPayload(payload *models.Error) *EventTypeBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the event type bad request response
func (o *EventTypeBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *EventTypeBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// EventTypeUnauthorizedCode is the HTTP code returned for type EventTypeUnauthorized
const EventTypeUnauthorizedCode int = 401

/*EventTypeUnauthorized Unauthorized

swagger:response eventTypeUnauthorized
*/
type EventTypeUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewEventTypeUnauthorized creates EventTypeUnauthorized with default headers values
func NewEventTypeUnauthorized() *EventTypeUnauthorized {

	return &EventTypeUnauthorized{}
}

// WithPayload adds the payload to the event type unauthorized response
func (o *EventTypeUnauthorized) WithPayload(payload *models.Error) *EventTypeUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the event type unauthorized response
func (o *EventTypeUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *EventTypeUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// EventTypeForbiddenCode is the HTTP code returned for type EventTypeForbidden
const EventTypeForbiddenCode int = 403

/*EventTypeForbidden Forbidden

swagger:response eventTypeForbidden
*/
type EventTypeForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewEventTypeForbidden creates EventTypeForbidden with default headers values
func NewEventTypeForbidden() *EventTypeForbidden {

	return &EventTypeForbidden{}
}

// WithPayload adds the payload to the event type forbidden response
func (o *EventTypeForbidden) WithPayload(payload *models.Error) *EventTypeForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the event type forbidden response
func (o *EventTypeForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *EventTypeForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// EventTypeNotFoundCode is the HTTP code returned for type EventTypeNotFound
const EventTypeNotFoundCode int = 404

/*EventTypeNotFound Not Found

swagger:response eventTypeNotFound
*/
type EventTypeNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewEventTypeNotFound creates EventTypeNotFound with default headers values
func NewEventTypeNotFound() *EventTypeNotFound {

	return &EventTypeNotFound{}
}

// WithPayload adds the payload to the event type not found response
func (o *EventTypeNotFound) WithPayload(payload *models.Error) *EventTypeNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the event type not found response
func (o *EventTypeNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *EventTypeNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// EventTypeInternalServerErrorCode is the HTTP code returned for type EventTypeInternalServerError
const EventTypeInternalServerErrorCode int = 500

/*EventTypeInternalServerError Internal Server Error

swagger:response eventTypeInternalServerError
*/
type EventTypeInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewEventTypeInternalServerError creates EventTypeInternalServerError with default headers values
func NewEventTypeInternalServerError() *EventTypeInternalServerError {

	return &EventTypeInternalServerError{}
}

// WithPayload adds the payload to the event type internal server error response
func (o *EventTypeInternalServerError) WithPayload(payload *models.Error) *EventTypeInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the event type internal server error response
func (o *EventTypeInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *EventTypeInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
