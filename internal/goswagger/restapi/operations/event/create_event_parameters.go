// Code generated by go-swagger; DO NOT EDIT.

package event

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"io"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/gmarcha/ent-goswagger-app/internal/ent"
)

// NewCreateEventParams creates a new CreateEventParams object
//
// There are no default values defined in the spec.
func NewCreateEventParams() CreateEventParams {

	return CreateEventParams{}
}

// CreateEventParams contains all the bound params for the create event operation
// typically these are obtained from a http.Request
//
// swagger:parameters createEvent
type CreateEventParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Event to create.
	  Required: true
	  In: body
	*/
	Event *ent.Event
	/*Event repetition count.
	  In: query
	*/
	RepeatCount *int64
	/*Event repetition type.
	  In: query
	*/
	RepeatType *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewCreateEventParams() beforehand.
func (o *CreateEventParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body ent.Event
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			if err == io.EOF {
				res = append(res, errors.Required("event", "body", ""))
			} else {
				res = append(res, errors.NewParseError("event", "body", "", err))
			}
		} else {
			// validate body object
			if err := body.Validate(route.Formats); err != nil {
				res = append(res, err)
			}

			ctx := validate.WithOperationRequest(context.Background())
			if err := body.ContextValidate(ctx, route.Formats); err != nil {
				res = append(res, err)
			}

			if len(res) == 0 {
				o.Event = &body
			}
		}
	} else {
		res = append(res, errors.Required("event", "body", ""))
	}

	qRepeatCount, qhkRepeatCount, _ := qs.GetOK("repeatCount")
	if err := o.bindRepeatCount(qRepeatCount, qhkRepeatCount, route.Formats); err != nil {
		res = append(res, err)
	}

	qRepeatType, qhkRepeatType, _ := qs.GetOK("repeatType")
	if err := o.bindRepeatType(qRepeatType, qhkRepeatType, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindRepeatCount binds and validates parameter RepeatCount from query.
func (o *CreateEventParams) bindRepeatCount(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("repeatCount", "query", "int64", raw)
	}
	o.RepeatCount = &value

	return nil
}

// bindRepeatType binds and validates parameter RepeatType from query.
func (o *CreateEventParams) bindRepeatType(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.RepeatType = &raw

	if err := o.validateRepeatType(formats); err != nil {
		return err
	}

	return nil
}

// validateRepeatType carries on validations for parameter RepeatType
func (o *CreateEventParams) validateRepeatType(formats strfmt.Registry) error {

	if err := validate.EnumCase("repeatType", "query", *o.RepeatType, []interface{}{"day", "week", "month"}, true); err != nil {
		return err
	}

	return nil
}
