// Code generated by go-swagger; DO NOT EDIT.

package authentication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/gamarcha/ent-goswagger-app/internal/goswagger/models"
)

// GetLoginFoundCode is the HTTP code returned for type GetLoginFound
const GetLoginFoundCode int = 302

/*GetLoginFound Found

swagger:response getLoginFound
*/
type GetLoginFound struct {
}

// NewGetLoginFound creates GetLoginFound with default headers values
func NewGetLoginFound() *GetLoginFound {

	return &GetLoginFound{}
}

// WriteResponse to the client
func (o *GetLoginFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(302)
}

// GetLoginInternalServerErrorCode is the HTTP code returned for type GetLoginInternalServerError
const GetLoginInternalServerErrorCode int = 500

/*GetLoginInternalServerError Internal Server Error

swagger:response getLoginInternalServerError
*/
type GetLoginInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetLoginInternalServerError creates GetLoginInternalServerError with default headers values
func NewGetLoginInternalServerError() *GetLoginInternalServerError {

	return &GetLoginInternalServerError{}
}

// WithPayload adds the payload to the get login internal server error response
func (o *GetLoginInternalServerError) WithPayload(payload *models.Error) *GetLoginInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get login internal server error response
func (o *GetLoginInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetLoginInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
