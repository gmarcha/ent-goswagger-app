// Code generated by go-swagger; DO NOT EDIT.

package authentication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TokenInfoHandlerFunc turns a function with the right signature into a token info handler
type TokenInfoHandlerFunc func(TokenInfoParams) middleware.Responder

// Handle executing the request and returning a response
func (fn TokenInfoHandlerFunc) Handle(params TokenInfoParams) middleware.Responder {
	return fn(params)
}

// TokenInfoHandler interface for that can handle valid token info params
type TokenInfoHandler interface {
	Handle(TokenInfoParams) middleware.Responder
}

// NewTokenInfo creates a new http.Handler for the token info operation
func NewTokenInfo(ctx *middleware.Context, handler TokenInfoHandler) *TokenInfo {
	return &TokenInfo{Context: ctx, Handler: handler}
}

/* TokenInfo swagger:route GET /auth/token/info Authentication tokenInfo

Send token information

Send token information or unauthorized error response.

*/
type TokenInfo struct {
	Context *middleware.Context
	Handler TokenInfoHandler
}

func (o *TokenInfo) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewTokenInfoParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// TokenInfoOKBody token info o k body
//
// swagger:model TokenInfoOKBody
type TokenInfoOKBody struct {

	// expires at
	// Format: date-time
	ExpiresAt strfmt.DateTime `json:"expiresAt,omitempty"`

	// username
	Login string `json:"login,omitempty"`
}

// Validate validates this token info o k body
func (o *TokenInfoOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateExpiresAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *TokenInfoOKBody) validateExpiresAt(formats strfmt.Registry) error {
	if swag.IsZero(o.ExpiresAt) { // not required
		return nil
	}

	if err := validate.FormatOf("tokenInfoOK"+"."+"expiresAt", "body", "date-time", o.ExpiresAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this token info o k body based on context it is used
func (o *TokenInfoOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *TokenInfoOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *TokenInfoOKBody) UnmarshalBinary(b []byte) error {
	var res TokenInfoOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
