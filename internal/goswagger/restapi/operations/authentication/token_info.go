// Code generated by go-swagger; DO NOT EDIT.

package authentication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/gmarcha/ent-goswagger-app/internal/goswagger/models"
)

// TokenInfoHandlerFunc turns a function with the right signature into a token info handler
type TokenInfoHandlerFunc func(TokenInfoParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn TokenInfoHandlerFunc) Handle(params TokenInfoParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// TokenInfoHandler interface for that can handle valid token info params
type TokenInfoHandler interface {
	Handle(TokenInfoParams, *models.Principal) middleware.Responder
}

// NewTokenInfo creates a new http.Handler for the token info operation
func NewTokenInfo(ctx *middleware.Context, handler TokenInfoHandler) *TokenInfo {
	return &TokenInfo{Context: ctx, Handler: handler}
}

/* TokenInfo swagger:route GET /auth/token/info Authentication tokenInfo

Send user information

Send authenticated user information or unauthorized error response.

*/
type TokenInfo struct {
	Context *middleware.Context
	Handler TokenInfoHandler
}

func (o *TokenInfo) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewTokenInfoParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
