// Code generated by go-swagger; DO NOT EDIT.

package authentication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/gmarcha/ent-goswagger-app/internal/goswagger/models"
)

// AuthorizeFoundCode is the HTTP code returned for type AuthorizeFound
const AuthorizeFoundCode int = 302

/*AuthorizeFound Found

swagger:response authorizeFound
*/
type AuthorizeFound struct {
}

// NewAuthorizeFound creates AuthorizeFound with default headers values
func NewAuthorizeFound() *AuthorizeFound {

	return &AuthorizeFound{}
}

// WriteResponse to the client
func (o *AuthorizeFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(302)
}

// AuthorizeUnauthorizedCode is the HTTP code returned for type AuthorizeUnauthorized
const AuthorizeUnauthorizedCode int = 401

/*AuthorizeUnauthorized Unauthorized

swagger:response authorizeUnauthorized
*/
type AuthorizeUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAuthorizeUnauthorized creates AuthorizeUnauthorized with default headers values
func NewAuthorizeUnauthorized() *AuthorizeUnauthorized {

	return &AuthorizeUnauthorized{}
}

// WithPayload adds the payload to the authorize unauthorized response
func (o *AuthorizeUnauthorized) WithPayload(payload *models.Error) *AuthorizeUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the authorize unauthorized response
func (o *AuthorizeUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AuthorizeUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AuthorizeUnprocessableEntityCode is the HTTP code returned for type AuthorizeUnprocessableEntity
const AuthorizeUnprocessableEntityCode int = 422

/*AuthorizeUnprocessableEntity Unprocessable Entity

swagger:response authorizeUnprocessableEntity
*/
type AuthorizeUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAuthorizeUnprocessableEntity creates AuthorizeUnprocessableEntity with default headers values
func NewAuthorizeUnprocessableEntity() *AuthorizeUnprocessableEntity {

	return &AuthorizeUnprocessableEntity{}
}

// WithPayload adds the payload to the authorize unprocessable entity response
func (o *AuthorizeUnprocessableEntity) WithPayload(payload *models.Error) *AuthorizeUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the authorize unprocessable entity response
func (o *AuthorizeUnprocessableEntity) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AuthorizeUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AuthorizeInternalServerErrorCode is the HTTP code returned for type AuthorizeInternalServerError
const AuthorizeInternalServerErrorCode int = 500

/*AuthorizeInternalServerError Internal Server Error

swagger:response authorizeInternalServerError
*/
type AuthorizeInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAuthorizeInternalServerError creates AuthorizeInternalServerError with default headers values
func NewAuthorizeInternalServerError() *AuthorizeInternalServerError {

	return &AuthorizeInternalServerError{}
}

// WithPayload adds the payload to the authorize internal server error response
func (o *AuthorizeInternalServerError) WithPayload(payload *models.Error) *AuthorizeInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the authorize internal server error response
func (o *AuthorizeInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AuthorizeInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
