// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "swagger": "2.0",
  "info": {
    "description": "An API for 42 tutors.",
    "title": "42 Tutors API",
    "contact": {},
    "version": "0.0.1"
  },
  "basePath": "/v2",
  "paths": {
    "/auth/callback": {
      "get": {
        "description": "Receive token as a response from 42 API.",
        "tags": [
          "Authentication"
        ],
        "summary": "Receive token",
        "operationId": "callback",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/auth/login": {
      "get": {
        "description": "Login a user with 42 API.",
        "tags": [
          "Authentication"
        ],
        "summary": "Login user",
        "operationId": "login",
        "responses": {
          "302": {
            "description": "Found"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/auth/token/info": {
      "get": {
        "security": [
          {
            "OAuth2": [
              "tutor"
            ]
          }
        ],
        "description": "Send authenticated user information or unauthorized error response.",
        "tags": [
          "Authentication"
        ],
        "summary": "Send user information",
        "operationId": "tokenInfo",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/auth/token/refresh": {
      "get": {
        "security": [
          {
            "OAuth2": [
              "tutor"
            ]
          }
        ],
        "description": "Refresh access token if refresh token is still valid.",
        "tags": [
          "Authentication"
        ],
        "summary": "Refresh token",
        "operationId": "tokenRefresh",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/events": {
      "get": {
        "security": [
          {
            "OAuth2": [
              "tutor"
            ]
          }
        ],
        "description": "List all events.",
        "tags": [
          "Event"
        ],
        "summary": "List events",
        "operationId": "listEvent",
        "parameters": [
          {
            "type": "string",
            "description": "Day filter.",
            "name": "day",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Week filter.",
            "name": "week",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Month filter.",
            "name": "month",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Event"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "post": {
        "security": [
          {
            "OAuth2": [
              "event"
            ]
          }
        ],
        "description": "Create a new event.",
        "tags": [
          "Event"
        ],
        "summary": "Create event",
        "operationId": "createEvent",
        "parameters": [
          {
            "description": "Event to create.",
            "name": "event",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/events/{id}": {
      "get": {
        "security": [
          {
            "OAuth2": [
              "tutor"
            ]
          }
        ],
        "description": "Read an event by ID.",
        "tags": [
          "Event"
        ],
        "summary": "Read event",
        "operationId": "readEvent",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "put": {
        "security": [
          {
            "OAuth2": [
              "event"
            ]
          }
        ],
        "description": "Update an event by ID.",
        "tags": [
          "Event"
        ],
        "summary": "Update event",
        "operationId": "updateEvent",
        "parameters": [
          {
            "description": "Event to update.",
            "name": "event",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "delete": {
        "security": [
          {
            "OAuth2": [
              "event"
            ]
          }
        ],
        "description": "Delete an event by ID.",
        "tags": [
          "Event"
        ],
        "summary": "Delete event",
        "operationId": "deleteEvent",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Event ID.",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/events/{id}/users": {
      "get": {
        "security": [
          {
            "OAuth2": [
              "tutor"
            ]
          }
        ],
        "description": "List users subscribed to an event.",
        "tags": [
          "Event"
        ],
        "summary": "List event users",
        "operationId": "listEventUsers",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Event ID.",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/users": {
      "get": {
        "security": [
          {
            "OAuth2": [
              "tutor"
            ]
          }
        ],
        "description": "List all users.",
        "tags": [
          "User"
        ],
        "summary": "List users",
        "operationId": "listUser",
        "parameters": [
          {
            "type": "boolean",
            "description": "List all tutors.",
            "name": "tutor",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "post": {
        "security": [
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "description": "Create a new user.",
        "tags": [
          "User"
        ],
        "summary": "Create user",
        "operationId": "createUser",
        "parameters": [
          {
            "description": "User to create.",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "security": [
          {
            "OAuth2": [
              "tutor"
            ]
          }
        ],
        "description": "Read the authenticated user.",
        "tags": [
          "User"
        ],
        "summary": "Read authenticated user",
        "operationId": "readMe",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "put": {
        "security": [
          {
            "OAuth2": [
              "tutor"
            ]
          }
        ],
        "description": "Update the authenticated user.",
        "tags": [
          "User"
        ],
        "summary": "Update authenticated user",
        "operationId": "updateMe",
        "parameters": [
          {
            "description": "User to update.",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "delete": {
        "security": [
          {
            "OAuth2": [
              "tutor"
            ]
          }
        ],
        "description": "Delete the authenticated user.",
        "tags": [
          "User"
        ],
        "summary": "Delete authenticated user",
        "operationId": "deleteMe",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/users/me/events": {
      "get": {
        "security": [
          {
            "OAuth2": [
              "tutor"
            ]
          }
        ],
        "description": "List the authenticated user's subscribed events.",
        "tags": [
          "User"
        ],
        "summary": "List authenticated user events",
        "operationId": "listMeEvents",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Event"
              }
            }
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/users/me/events/{id}": {
      "post": {
        "security": [
          {
            "OAuth2": [
              "tutor"
            ]
          }
        ],
        "description": "Subscribe an authenticated user to an event.",
        "tags": [
          "User"
        ],
        "summary": "Subscribe authenticated user",
        "operationId": "subscribeMe",
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "type": "string",
              "example": "Done"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "delete": {
        "security": [
          {
            "OAuth2": [
              "tutor"
            ]
          }
        ],
        "description": "Unsubscribe an authenticated user to an event.",
        "tags": [
          "User"
        ],
        "summary": "Unsubscribe authenticated user",
        "operationId": "unsubscribeMe",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Event ID.",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/users/{id}": {
      "get": {
        "security": [
          {
            "OAuth2": [
              "tutor"
            ]
          }
        ],
        "description": "Read an user by ID.",
        "tags": [
          "User"
        ],
        "summary": "Read user",
        "operationId": "readUser",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "put": {
        "security": [
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "description": "Update an user by ID.",
        "tags": [
          "User"
        ],
        "summary": "Update user",
        "operationId": "updateUser",
        "parameters": [
          {
            "description": "User to update.",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "delete": {
        "security": [
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "description": "Delete an user by ID.",
        "tags": [
          "User"
        ],
        "summary": "Delete user",
        "operationId": "deleteUser",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "User ID.",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/users/{id}/events": {
      "get": {
        "security": [
          {
            "OAuth2": [
              "tutor"
            ]
          }
        ],
        "description": "List user's subscribed events.",
        "tags": [
          "User"
        ],
        "summary": "List user events",
        "operationId": "listUserEvents",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Event"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "User ID.",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/users/{userId}/events/{eventId}": {
      "post": {
        "security": [
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "description": "Subscribe a user to an event.",
        "tags": [
          "User"
        ],
        "summary": "Subscribe user",
        "operationId": "subscribeUser",
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "type": "string",
              "example": "Done"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "delete": {
        "security": [
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "description": "Unsubscribe a user to an event.",
        "tags": [
          "User"
        ],
        "summary": "Unsubscribe user",
        "operationId": "unsubscribeUser",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "User ID.",
          "name": "userId",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Event ID.",
          "name": "eventId",
          "in": "path",
          "required": true
        }
      ]
    }
  },
  "definitions": {
    "Error": {
      "type": "object",
      "required": [
        "code",
        "status",
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "example": 500
        },
        "message": {
          "type": "string",
          "example": "Explicit error message"
        },
        "status": {
          "type": "string",
          "example": "Internal Server Error"
        }
      }
    },
    "Event": {
      "type": "object",
      "required": [
        "createdAt",
        "endAt",
        "id",
        "name",
        "startAt"
      ],
      "properties": {
        "category": {
          "type": "string",
          "example": "exam"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "type": "string"
        },
        "endAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "startAt": {
          "type": "string",
          "format": "date-time"
        },
        "tutorsRequired": {
          "type": "integer",
          "format": "int64"
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        },
        "walletsReward": {
          "type": "integer",
          "format": "int64"
        }
      },
      "x-go-type": {
        "import": {
          "package": "github.com/gmarcha/ent-goswagger-app/internal/ent"
        },
        "type": "Event"
      }
    },
    "User": {
      "type": "object",
      "required": [
        "adminScope",
        "calendarScope",
        "id",
        "login"
      ],
      "properties": {
        "adminScope": {
          "type": "boolean"
        },
        "calendarScope": {
          "type": "boolean"
        },
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Event"
          }
        },
        "firstName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "imagePath": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "login": {
          "type": "string"
        }
      },
      "x-go-type": {
        "import": {
          "package": "github.com/gmarcha/ent-goswagger-app/internal/ent"
        },
        "type": "User"
      }
    },
    "principal": {
      "type": "string"
    }
  },
  "responses": {
    "400": {
      "description": "Bad request",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "401": {
      "description": "Unauthorized",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "403": {
      "description": "Forbidden",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "404": {
      "description": "Not Found",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "500": {
      "description": "Internal Server Error",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    }
  },
  "securityDefinitions": {
    "OAuth2": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://api.intra.42.fr/oauth/authorize",
      "tokenUrl": "https://api.intra.42.fr/oauth/token",
      "scopes": {
        "admin": "Admin scope",
        "event": "Event scope",
        "tutor": "Tutor scope"
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "swagger": "2.0",
  "info": {
    "description": "An API for 42 tutors.",
    "title": "42 Tutors API",
    "contact": {},
    "version": "0.0.1"
  },
  "basePath": "/v2",
  "paths": {
    "/auth/callback": {
      "get": {
        "description": "Receive token as a response from 42 API.",
        "tags": [
          "Authentication"
        ],
        "summary": "Receive token",
        "operationId": "callback",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/auth/login": {
      "get": {
        "description": "Login a user with 42 API.",
        "tags": [
          "Authentication"
        ],
        "summary": "Login user",
        "operationId": "login",
        "responses": {
          "302": {
            "description": "Found"
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/auth/token/info": {
      "get": {
        "security": [
          {
            "OAuth2": [
              "tutor"
            ]
          }
        ],
        "description": "Send authenticated user information or unauthorized error response.",
        "tags": [
          "Authentication"
        ],
        "summary": "Send user information",
        "operationId": "tokenInfo",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/auth/token/refresh": {
      "get": {
        "security": [
          {
            "OAuth2": [
              "tutor"
            ]
          }
        ],
        "description": "Refresh access token if refresh token is still valid.",
        "tags": [
          "Authentication"
        ],
        "summary": "Refresh token",
        "operationId": "tokenRefresh",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/events": {
      "get": {
        "security": [
          {
            "OAuth2": [
              "tutor"
            ]
          }
        ],
        "description": "List all events.",
        "tags": [
          "Event"
        ],
        "summary": "List events",
        "operationId": "listEvent",
        "parameters": [
          {
            "type": "string",
            "description": "Day filter.",
            "name": "day",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Week filter.",
            "name": "week",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Month filter.",
            "name": "month",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Event"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "OAuth2": [
              "event"
            ]
          }
        ],
        "description": "Create a new event.",
        "tags": [
          "Event"
        ],
        "summary": "Create event",
        "operationId": "createEvent",
        "parameters": [
          {
            "description": "Event to create.",
            "name": "event",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/events/{id}": {
      "get": {
        "security": [
          {
            "OAuth2": [
              "tutor"
            ]
          }
        ],
        "description": "Read an event by ID.",
        "tags": [
          "Event"
        ],
        "summary": "Read event",
        "operationId": "readEvent",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "OAuth2": [
              "event"
            ]
          }
        ],
        "description": "Update an event by ID.",
        "tags": [
          "Event"
        ],
        "summary": "Update event",
        "operationId": "updateEvent",
        "parameters": [
          {
            "description": "Event to update.",
            "name": "event",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "OAuth2": [
              "event"
            ]
          }
        ],
        "description": "Delete an event by ID.",
        "tags": [
          "Event"
        ],
        "summary": "Delete event",
        "operationId": "deleteEvent",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Event ID.",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/events/{id}/users": {
      "get": {
        "security": [
          {
            "OAuth2": [
              "tutor"
            ]
          }
        ],
        "description": "List users subscribed to an event.",
        "tags": [
          "Event"
        ],
        "summary": "List event users",
        "operationId": "listEventUsers",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Event ID.",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/users": {
      "get": {
        "security": [
          {
            "OAuth2": [
              "tutor"
            ]
          }
        ],
        "description": "List all users.",
        "tags": [
          "User"
        ],
        "summary": "List users",
        "operationId": "listUser",
        "parameters": [
          {
            "type": "boolean",
            "description": "List all tutors.",
            "name": "tutor",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "description": "Create a new user.",
        "tags": [
          "User"
        ],
        "summary": "Create user",
        "operationId": "createUser",
        "parameters": [
          {
            "description": "User to create.",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "security": [
          {
            "OAuth2": [
              "tutor"
            ]
          }
        ],
        "description": "Read the authenticated user.",
        "tags": [
          "User"
        ],
        "summary": "Read authenticated user",
        "operationId": "readMe",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "OAuth2": [
              "tutor"
            ]
          }
        ],
        "description": "Update the authenticated user.",
        "tags": [
          "User"
        ],
        "summary": "Update authenticated user",
        "operationId": "updateMe",
        "parameters": [
          {
            "description": "User to update.",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "OAuth2": [
              "tutor"
            ]
          }
        ],
        "description": "Delete the authenticated user.",
        "tags": [
          "User"
        ],
        "summary": "Delete authenticated user",
        "operationId": "deleteMe",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/me/events": {
      "get": {
        "security": [
          {
            "OAuth2": [
              "tutor"
            ]
          }
        ],
        "description": "List the authenticated user's subscribed events.",
        "tags": [
          "User"
        ],
        "summary": "List authenticated user events",
        "operationId": "listMeEvents",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Event"
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/me/events/{id}": {
      "post": {
        "security": [
          {
            "OAuth2": [
              "tutor"
            ]
          }
        ],
        "description": "Subscribe an authenticated user to an event.",
        "tags": [
          "User"
        ],
        "summary": "Subscribe authenticated user",
        "operationId": "subscribeMe",
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "type": "string",
              "example": "Done"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "OAuth2": [
              "tutor"
            ]
          }
        ],
        "description": "Unsubscribe an authenticated user to an event.",
        "tags": [
          "User"
        ],
        "summary": "Unsubscribe authenticated user",
        "operationId": "unsubscribeMe",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Event ID.",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/users/{id}": {
      "get": {
        "security": [
          {
            "OAuth2": [
              "tutor"
            ]
          }
        ],
        "description": "Read an user by ID.",
        "tags": [
          "User"
        ],
        "summary": "Read user",
        "operationId": "readUser",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "description": "Update an user by ID.",
        "tags": [
          "User"
        ],
        "summary": "Update user",
        "operationId": "updateUser",
        "parameters": [
          {
            "description": "User to update.",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "description": "Delete an user by ID.",
        "tags": [
          "User"
        ],
        "summary": "Delete user",
        "operationId": "deleteUser",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "User ID.",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/users/{id}/events": {
      "get": {
        "security": [
          {
            "OAuth2": [
              "tutor"
            ]
          }
        ],
        "description": "List user's subscribed events.",
        "tags": [
          "User"
        ],
        "summary": "List user events",
        "operationId": "listUserEvents",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Event"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "User ID.",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/users/{userId}/events/{eventId}": {
      "post": {
        "security": [
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "description": "Subscribe a user to an event.",
        "tags": [
          "User"
        ],
        "summary": "Subscribe user",
        "operationId": "subscribeUser",
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "type": "string",
              "example": "Done"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "OAuth2": [
              "admin"
            ]
          }
        ],
        "description": "Unsubscribe a user to an event.",
        "tags": [
          "User"
        ],
        "summary": "Unsubscribe user",
        "operationId": "unsubscribeUser",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "User ID.",
          "name": "userId",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Event ID.",
          "name": "eventId",
          "in": "path",
          "required": true
        }
      ]
    }
  },
  "definitions": {
    "Error": {
      "type": "object",
      "required": [
        "code",
        "status",
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "example": 500
        },
        "message": {
          "type": "string",
          "example": "Explicit error message"
        },
        "status": {
          "type": "string",
          "example": "Internal Server Error"
        }
      }
    },
    "Event": {
      "type": "object",
      "required": [
        "createdAt",
        "endAt",
        "id",
        "name",
        "startAt"
      ],
      "properties": {
        "category": {
          "type": "string",
          "example": "exam"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "type": "string"
        },
        "endAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "startAt": {
          "type": "string",
          "format": "date-time"
        },
        "tutorsRequired": {
          "type": "integer",
          "format": "int64"
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        },
        "walletsReward": {
          "type": "integer",
          "format": "int64"
        }
      },
      "x-go-type": {
        "import": {
          "package": "github.com/gmarcha/ent-goswagger-app/internal/ent"
        },
        "type": "Event"
      }
    },
    "User": {
      "type": "object",
      "required": [
        "adminScope",
        "calendarScope",
        "id",
        "login"
      ],
      "properties": {
        "adminScope": {
          "type": "boolean"
        },
        "calendarScope": {
          "type": "boolean"
        },
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Event"
          }
        },
        "firstName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "imagePath": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "login": {
          "type": "string"
        }
      },
      "x-go-type": {
        "import": {
          "package": "github.com/gmarcha/ent-goswagger-app/internal/ent"
        },
        "type": "User"
      }
    },
    "principal": {
      "type": "string"
    }
  },
  "responses": {
    "400": {
      "description": "Bad request",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "401": {
      "description": "Unauthorized",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "403": {
      "description": "Forbidden",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "404": {
      "description": "Not Found",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "500": {
      "description": "Internal Server Error",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    }
  },
  "securityDefinitions": {
    "OAuth2": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://api.intra.42.fr/oauth/authorize",
      "tokenUrl": "https://api.intra.42.fr/oauth/token",
      "scopes": {
        "admin": "Admin scope",
        "event": "Event scope",
        "tutor": "Tutor scope"
      }
    }
  }
}`))
}
