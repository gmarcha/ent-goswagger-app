# Code generated by an automated script, DO NOT EDIT. Edit './config/spec.yaml' instead.
swagger: "2.0"
info:
  title: 42 Tutors API
  description: An API for 42 tutors.
  contact: {}
  version: 0.0.1
basePath: /v2
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  OAuth2:
    type: oauth2
    flow: accessCode
    authorizationUrl: https://api.intra.42.fr/oauth/authorize
    tokenUrl: https://api.intra.42.fr/oauth/token
    scopes:
      tutor: Tutor scope
      event: Event scope
      admin: Admin scope
paths:
  /auth/login:
    get:
      summary: Login user
      description: Login a user with 42 API.
      tags:
        - Authentication
      operationId: login
      responses:
        "302":
          description: Found
        "500":
          $ref: '#/responses/500'
  /auth/callback:
    get:
      summary: Receive token
      description: Receive token as a response from 42 API.
      tags:
        - Authentication
      operationId: callback
      responses:
        "200":
          description: OK
          schema:
            type: string
        "401":
          $ref: '#/responses/401'
        "500":
          $ref: '#/responses/500'
  /auth/token/info:
    get:
      summary: Send user information
      description: Send authenticated user information or unauthorized error response.
      tags:
        - Authentication
      operationId: tokenInfo
      security:
        - OAuth2:
            - tutor
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
        "401":
          $ref: '#/responses/401'
        "500":
          $ref: '#/responses/500'
  /auth/token/refresh:
    get:
      summary: Refresh token
      description: Refresh access token if refresh token is still valid.
      tags:
        - Authentication
      operationId: tokenRefresh
      security:
        - OAuth2:
            - tutor
      responses:
        "200":
          description: OK
          schema:
            type: string
        "401":
          $ref: '#/responses/401'
        "500":
          $ref: '#/responses/500'
  /events:
    get:
      summary: List events
      description: List all events.
      tags:
        - Event
      operationId: listEvent
      security:
        - OAuth2:
            - tutor
      parameters:
        - in: query
          name: day
          description: Day filter.
          type: string
        - in: query
          name: week
          description: Week filter.
          type: string
        - in: query
          name: month
          description: Month filter.
          type: string
      responses:
        "200":
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Event'
        "400":
          $ref: '#/responses/400'
        "500":
          $ref: '#/responses/500'
    post:
      summary: Create event
      description: Create a new event.
      tags:
        - Event
      operationId: createEvent
      security:
        - OAuth2:
            - event
      parameters:
        - in: body
          name: event
          required: true
          description: Event to create.
          schema:
            $ref: '#/definitions/Event'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/Event'
        "400":
          $ref: '#/responses/400'
        "500":
          $ref: '#/responses/500'
  /events/{id}:
    parameters:
      - in: path
        name: id
        required: true
        description: Event ID.
        type: string
    get:
      summary: Read event
      description: Read an event by ID.
      tags:
        - Event
      operationId: readEvent
      security:
        - OAuth2:
            - tutor
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Event'
        "400":
          $ref: '#/responses/400'
        "404":
          $ref: '#/responses/404'
        "500":
          $ref: '#/responses/500'
    put:
      summary: Update event
      description: Update an event by ID.
      tags:
        - Event
      operationId: updateEvent
      security:
        - OAuth2:
            - event
      parameters:
        - in: body
          name: event
          required: true
          description: Event to update.
          schema:
            $ref: '#/definitions/Event'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Event'
        "400":
          $ref: '#/responses/400'
        "404":
          $ref: '#/responses/404'
        "500":
          $ref: '#/responses/500'
    delete:
      summary: Delete event
      description: Delete an event by ID.
      tags:
        - Event
      operationId: deleteEvent
      security:
        - OAuth2:
            - event
      responses:
        "204":
          description: No Content
        "400":
          $ref: '#/responses/400'
        "404":
          $ref: '#/responses/404'
        "500":
          $ref: '#/responses/500'
  /events/{id}/users:
    parameters:
      - in: path
        name: id
        required: true
        description: Event ID.
        type: string
    get:
      summary: List event users
      description: List users subscribed to an event.
      tags:
        - Event
      operationId: listEventUsers
      security:
        - OAuth2:
            - tutor
      responses:
        "200":
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        "400":
          $ref: '#/responses/400'
        "404":
          $ref: '#/responses/404'
        "500":
          $ref: '#/responses/500'
  /users:
    get:
      summary: List users
      description: List all users.
      tags:
        - User
      operationId: listUser
      security:
        - OAuth2:
            - tutor
      parameters:
        - in: query
          name: tutor
          description: List all tutors.
          type: boolean
      responses:
        "200":
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        "400":
          $ref: '#/responses/400'
        "500":
          $ref: '#/responses/500'
    post:
      summary: Create user
      description: Create a new user.
      tags:
        - User
      operationId: createUser
      security:
        - OAuth2:
            - admin
      parameters:
        - in: body
          name: user
          required: true
          description: User to create.
          schema:
            $ref: '#/definitions/User'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/User'
        "400":
          $ref: '#/responses/400'
        "500":
          $ref: '#/responses/500'
  /users/{id}:
    parameters:
      - in: path
        name: id
        required: true
        description: User ID.
        type: string
    get:
      summary: Read user
      description: Read an user by ID.
      tags:
        - User
      operationId: readUser
      security:
        - OAuth2:
            - tutor
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
        "400":
          $ref: '#/responses/400'
        "404":
          $ref: '#/responses/404'
        "500":
          $ref: '#/responses/500'
    put:
      summary: Update user
      description: Update an user by ID.
      tags:
        - User
      operationId: updateUser
      security:
        - OAuth2:
            - admin
      parameters:
        - in: body
          name: user
          required: true
          description: User to update.
          schema:
            $ref: '#/definitions/User'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
        "400":
          $ref: '#/responses/400'
        "404":
          $ref: '#/responses/404'
        "500":
          $ref: '#/responses/500'
    delete:
      summary: Delete user
      description: Delete an user by ID.
      tags:
        - User
      operationId: deleteUser
      security:
        - OAuth2:
            - admin
      responses:
        "204":
          description: No Content
        "400":
          $ref: '#/responses/400'
        "404":
          $ref: '#/responses/404'
        "500":
          $ref: '#/responses/500'
  /users/me:
    get:
      summary: Read authenticated user
      description: Read the authenticated user.
      tags:
        - User
      operationId: readMe
      security:
        - OAuth2:
            - tutor
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
        "500":
          $ref: '#/responses/500'
    put:
      summary: Update authenticated user
      description: Update the authenticated user.
      tags:
        - User
      operationId: updateMe
      security:
        - OAuth2:
            - tutor
      parameters:
        - in: body
          name: user
          required: true
          description: User to update.
          schema:
            $ref: '#/definitions/User'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
        "500":
          $ref: '#/responses/500'
    delete:
      summary: Delete authenticated user
      description: Delete the authenticated user.
      tags:
        - User
      operationId: deleteMe
      security:
        - OAuth2:
            - tutor
      responses:
        "204":
          description: No Content
        "500":
          $ref: '#/responses/500'
  /users/{id}/events:
    parameters:
      - in: path
        name: id
        required: true
        description: User ID.
        type: string
    get:
      summary: List user events
      description: List user's subscribed events.
      tags:
        - User
      operationId: listUserEvents
      security:
        - OAuth2:
            - tutor
      responses:
        "200":
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Event'
        "400":
          $ref: '#/responses/400'
        "404":
          $ref: '#/responses/404'
        "500":
          $ref: '#/responses/500'
  /users/me/events:
    get:
      summary: List authenticated user events
      description: List the authenticated user's subscribed events.
      tags:
        - User
      operationId: listMeEvents
      security:
        - OAuth2:
            - tutor
      responses:
        "200":
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Event'
        "500":
          $ref: '#/responses/500'
  /users/{userId}/events/{eventId}:
    parameters:
      - in: path
        name: userId
        required: true
        description: User ID.
        type: string
      - in: path
        name: eventId
        required: true
        description: Event ID.
        type: string
    post:
      summary: Subscribe user
      description: Subscribe a user to an event.
      tags:
        - User
      operationId: subscribeUser
      security:
        - OAuth2:
            - admin
      responses:
        "201":
          description: OK
          schema:
            type: string
            example: Done
        "400":
          $ref: '#/responses/400'
        "404":
          $ref: '#/responses/404'
        "500":
          $ref: '#/responses/500'
    delete:
      summary: Unsubscribe user
      description: Unsubscribe a user to an event.
      tags:
        - User
      operationId: unsubscribeUser
      security:
        - OAuth2:
            - admin
      responses:
        "204":
          description: No Content
        "400":
          $ref: '#/responses/400'
        "404":
          $ref: '#/responses/404'
        "500":
          $ref: '#/responses/500'
  /users/me/events/{id}:
    parameters:
      - in: path
        name: id
        required: true
        description: Event ID.
        type: string
    post:
      summary: Subscribe authenticated user
      description: Subscribe an authenticated user to an event.
      tags:
        - User
      operationId: subscribeMe
      security:
        - OAuth2:
            - tutor
      responses:
        "201":
          description: OK
          schema:
            type: string
            example: Done
        "400":
          $ref: '#/responses/400'
        "404":
          $ref: '#/responses/404'
        "500":
          $ref: '#/responses/500'
    delete:
      summary: Unsubscribe authenticated user
      description: Unsubscribe an authenticated user to an event.
      tags:
        - User
      operationId: unsubscribeMe
      security:
        - OAuth2:
            - tutor
      responses:
        "204":
          description: No Content
        "400":
          $ref: '#/responses/400'
        "404":
          $ref: '#/responses/404'
        "500":
          $ref: '#/responses/500'
responses:
  400:
    description: Bad request
    schema:
      $ref: '#/definitions/Error'
  401:
    description: Unauthorized
    schema:
      $ref: '#/definitions/Error'
  403:
    description: Forbidden
    schema:
      $ref: '#/definitions/Error'
  404:
    description: Not Found
    schema:
      $ref: '#/definitions/Error'
  500:
    description: Internal Server Error
    schema:
      $ref: '#/definitions/Error'
definitions:
  Event:
    type: object
    required:
      - createdAt
      - endAt
      - id
      - name
      - startAt
    properties:
      category:
        type: string
        example: exam
      createdAt:
        type: string
        format: date-time
      description:
        type: string
      endAt:
        type: string
        format: date-time
      id:
        type: string
      name:
        type: string
      startAt:
        type: string
        format: date-time
      tutorsRequired:
        type: integer
        format: int64
      users:
        type: array
        items:
          $ref: '#/definitions/User'
      walletsReward:
        type: integer
        format: int64
    x-go-type:
      type: Event
      import:
        package: github.com/gmarcha/ent-goswagger-app/internal/ent
  User:
    type: object
    required:
      - adminScope
      - calendarScope
      - id
      - login
    properties:
      adminScope:
        type: boolean
      calendarScope:
        type: boolean
      events:
        type: array
        items:
          $ref: '#/definitions/Event'
      firstName:
        type: string
      id:
        type: string
      imagePath:
        type: string
      lastName:
        type: string
      login:
        type: string
    x-go-type:
      type: User
      import:
        package: github.com/gmarcha/ent-goswagger-app/internal/ent
  Error:
    type: object
    properties:
      code:
        type: integer
        example: 500
      status:
        type: string
        example: Internal Server Error
      message:
        type: string
        example: Explicit error message
    required:
      - code
      - status
      - message
  principal:
    type: string
