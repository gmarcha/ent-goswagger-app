swagger: "2.0"

info:
  title: 42 Tutors API
  description: An API for 42 tutors.
  contact: {}
  version: 0.0.1

consumes:
  - application/json
produces:
  - application/json

securityDefinitions:
  OauthSecurity:
    type: oauth2
    flow: accessCode
    authorizationUrl: 'https://api.intra.42.fr/oauth/authorize'
    tokenUrl: 'https://api.intra.42.fr/oauth/token'
    scopes:
      user: User scope

security:
  - OauthSecurity:
    - user

paths:

  /login:
    get:
      summary: Login user
      description: Login to 42 API with OAuth 2.0.
      tags:
        - Authentication
      security: []
      responses:
        "302":
          description: Found
        "500":
          $ref: '#/responses/500'

  /auth/callback:
    get:
      summary: Return user token
      description: Retrieve token from 42 API.
      tags:
        - Authentication
      security: []
      responses:
        "200":
          description: OK
          schema:
            type: string
        "500":
          $ref: '#/responses/500'

  /events:
    get:
      summary: List events
      description: List all events.
      tags:
        - Event
      operationId: listEvent
      parameters:
      - in: query
        name: day
        description: Day filter.
        type: string
      - in: query
        name: week
        description: Week filter.
        type: string
      - in: query
        name: month
        description: Month filter.
        type: string
      responses:
        "200":
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Event'
        "400":
          $ref: '#/responses/400'
        "500":
          $ref: '#/responses/500'
    post:
      summary: Create event
      description: Create a new event.
      tags:
        - Event
      operationId: createEvent
      parameters:
      - in: body
        name: event
        required: true
        description: Event to create.
        schema:
          $ref: '#/definitions/Event'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/Event'
        "400":
          $ref: '#/responses/400'
        "500":
          $ref: '#/responses/500'

  /events/{id}:
    parameters:
      - in: path
        name: id
        required: true
        description: Event ID.
        type: string
    get:
      summary: Read event
      description: Read an event by ID.
      tags:
        - Event
      operationId: readEvent
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Event'
        "400":
          $ref: '#/responses/400'
        "404":
          $ref: '#/responses/404'
        "500":
          $ref: '#/responses/500'
    put:
      summary: Update event
      description: Update an event by ID.
      tags:
        - Event
      operationId: updateEvent
      parameters:
      - in: body
        name: event
        required: true
        description: Event to update.
        schema:
          $ref: '#/definitions/Event'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Event'
        "400":
          $ref: '#/responses/400'
        "404":
          $ref: '#/responses/404'
        "500":
          $ref: '#/responses/500'
    delete:
      summary: Delete event
      description: Delete an event by ID.
      tags:
        - Event
      operationId: deleteEvent
      responses:
        "204":
          description: No Content
        "400":
          $ref: '#/responses/400'
        "404":
          $ref: '#/responses/404'
        "500":
          $ref: '#/responses/500'

  /events/{id}/users:
    parameters:
      - in: path
        name: id
        required: true
        description: Event ID.
        type: string
    get:
      summary: List event users
      description: List users subscribed to an event.
      tags:
        - Event
      operationId: listEventUsers
      responses:
        "200":
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        "400":
          $ref: '#/responses/400'
        "404":
          $ref: '#/responses/404'
        "500":
          $ref: '#/responses/500'

  /users:
    get:
      summary: List users
      description: List all users.
      tags:
        - User
      operationId: listUser
      parameters:
      - in: query
        name: tutor
        description: List all tutors.
        type: boolean
      responses:
        "200":
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        "400":
          $ref: '#/responses/400'
        "500":
          $ref: '#/responses/500'
    post:
      summary: Create user
      description: Create a new user.
      tags:
        - User
      operationId: createUser
      parameters:
      - in: body
        name: user
        required: true
        description: User to create.
        schema:
          $ref: '#/definitions/User'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/User'
        "400":
          $ref: '#/responses/400'
        "500":
          $ref: '#/responses/500'

  /users/{id}:
    parameters:
      - in: path
        name: id
        required: true
        description: User ID.
        type: string
    get:
      summary: Read user
      description: Read an user by ID.
      tags:
        - User
      operationId: readUser
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
        "400":
          $ref: '#/responses/400'
        "404":
          $ref: '#/responses/404'
        "500":
          $ref: '#/responses/500'
    put:
      summary: Update user
      description: Update an user by ID.
      tags:
        - User
      operationId: updateUser
      parameters:
      - in: body
        name: user
        required: true
        description: User to update.
        schema:
          $ref: '#/definitions/User'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
        "400":
          $ref: '#/responses/400'
        "404":
          $ref: '#/responses/404'
        "500":
          $ref: '#/responses/500'
    delete:
      summary: Delete user
      description: Delete an user by ID.
      tags:
        - User
      operationId: deleteUser
      responses:
        "204":
          description: No Content
        "400":
          $ref: '#/responses/400'
        "404":
          $ref: '#/responses/404'
        "500":
          $ref: '#/responses/500'

  /users/{id}/events:
    parameters:
      - in: path
        name: id
        required: true
        description: User ID.
        type: string
    get:
      summary: List user events
      description: List user's subscribed events.
      tags:
        - User
      operationId: listUserEvents
      responses:
        "200":
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Event'
        "400":
          $ref: '#/responses/400'
        "404":
          $ref: '#/responses/404'
        "500":
          $ref: '#/responses/500'

  /users/{userId}/events/{eventId}:
    parameters:
      - in: path
        name: userId
        required: true
        description: User ID.
        type: string
      - in: path
        name: eventId
        required: true
        description: Event ID.
        type: string
    post:
      summary: Subscribe user
      description: Subscribe user to an event.
      tags:
        - User
      operationId: subscribeUser
      responses:
        "201":
          description: OK
          schema:
            type: string
            example: Done
        "400":
          $ref: '#/responses/400'
        "404":
          $ref: '#/responses/404'
        "500":
          $ref: '#/responses/500'
    delete:
      summary: Unsubscribe user
      description: Unsubscribe user to an event.
      tags:
        - User
      operationId: unsubscribeUser
      responses:
        "204":
          description: No Content
        "400":
          $ref: '#/responses/400'
        "404":
          $ref: '#/responses/404'
        "500":
          $ref: '#/responses/500'

responses:

  400:
    description: Bad request
    schema:
      $ref: '#/definitions/Error'
  401:
    description: Unauthorized
    schema:
      $ref: '#/definitions/Error'
  403:
    description: Forbidden
    schema:
      $ref: '#/definitions/Error'
  404:
    description: Not Found
    schema:
      $ref: '#/definitions/Error'
  500:
    description: Internal Server Error
    schema:
      $ref: '#/definitions/Error'

definitions:

  Event:
    type: object
    properties:
      id:
        type: string
        format: uuid
        readOnly: true
        example: 123e4567-e89b-12d3-a456-426614174000
      name:
        type: string
        format: string
        minLength: 1
        example: Exam Stud
      description:
        type: string
        format: string
        example: Exam Alone in the Dark - Exam Rank 2/3/4/5/6
      tutorsRequired:
        type: integer
        format: int64
        example: 3
      # Is it really necessary ? (If yes, so we need to update this field on each subscription ? Or if no, can we retrieve number of subscription by counting items in eventUsers ?)
      tutorsSubscribed:
        type: integer
        format: int64
        example: 0
      walletsReward:
        type: integer
        format: int64
        example: 200
      createdAt:
        type: string
        format: date-time
        readOnly: true
        example: "2022-02-15T09:00:00Z"
      startAt:
        type: string
        format: date-time
        example: "2022-02-15T10:00:00+01:00"
      endAt:
        type: string
        format: date-time
        example: "2022-02-15T13:00:00+01:00"
      users:
        type: array
        items:
          $ref: '#/definitions/User'

  User:
    type: object
    properties:
      id:
        type: string
        format: uuid
        readOnly: true
        example: 123e4567-e89b-12d3-a456-426614174000
      login:
        type: string
        format: string
        minLength: 2
        example: gamarcha
      firstName:
        type: string
        format: string
        example: Gaëtan
      lastName:
        type: string
        format: string
        example: Marchal
      # Is it really necessary ? (If yes, update on event subscription or when event is done ? And if no, how to implement it ?)
      hoursDone:
        type: integer
        format: int64
        example: 6
      # Are these booleans necessary ? Why do we need them, whereas securityDefinitions normally rule authentication issues ?
      tutorScope:
        type: boolean
        example: true
      adminScope:
        type: boolean
        example: false
      events:
        type: array
        items:
          $ref: '#/definitions/Event'

  Error:
    type: object
    properties:
      code:
        type: integer
        example: 500
      message:
        type: string
        example: Internal Server Error
    required:
      - code
      - message

  principal:
    type: string

# What kind of new fields are needed in the specification ? Need to ask.
