# Code generated by an automated script, DO NOT EDIT. Edit './config/spec.yaml' instead.
swagger: "2.0"
info:
  title: 42 Tutors API
  description: An API for 42 tutors.
  contact: {}
  version: 0.0.1
basePath: /v2
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  OAuth2:
    type: oauth2
    flow: accessCode
    authorizationUrl: https://api.intra.42.fr/oauth/authorize
    tokenUrl: https://api.intra.42.fr/oauth/token
    scopes:
      public: Public access
      event: Read events
      event:write: Read-write events
      user: Read users
      user:subscription: Subscribe to events
      user:write: Read-write users
paths:
  /auth/login:
    get:
      summary: Login user
      description: Login a user with redirection.
      tags:
        - Authentication
      operationId: login
      responses:
        "302":
          description: Found
        "500":
          $ref: '#/responses/500'
  /auth/callback:
    get:
      summary: Authenticate user
      description: Authenticate a user with an authorization code.
      tags:
        - Authentication
      operationId: callback
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Token'
        "401":
          $ref: '#/responses/422'
        "422":
          $ref: '#/responses/422'
        "500":
          $ref: '#/responses/500'
  /auth/token/info:
    get:
      summary: Send token information
      description: Send token information or unauthorized error response.
      tags:
        - Authentication
      operationId: tokenInfo
      parameters:
        - in: header
          name: Authorization
          type: string
          required: true
          description: Bearer access token
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TokenInfo'
        "401":
          $ref: '#/responses/401'
        "500":
          $ref: '#/responses/500'
  /auth/token/refresh:
    get:
      summary: Refresh token
      description: Refresh expired token.
      tags:
        - Authentication
      operationId: tokenRefresh
      parameters:
        - in: header
          name: Authorization
          type: string
          required: true
          description: Bearer refresh token
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Token'
        "401":
          $ref: '#/responses/401'
        "500":
          $ref: '#/responses/500'
  /events:
    get:
      summary: List events
      description: List all events.
      tags:
        - Event
      operationId: listEvent
      security:
        - OAuth2:
            - public
      parameters:
        - in: query
          name: day
          description: Day filter.
          type: string
        - in: query
          name: month
          description: Month filter.
          type: string
      responses:
        "200":
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Event'
        "401":
          $ref: '#/responses/401'
        "403":
          $ref: '#/responses/403'
        "500":
          $ref: '#/responses/500'
    post:
      summary: Create event
      description: Create a new event.
      tags:
        - Event
      operationId: createEvent
      security:
        - OAuth2:
            - public
            - event
            - event:write
      parameters:
        - in: body
          name: event
          required: true
          description: Event to create.
          schema:
            $ref: '#/definitions/Event'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/Event'
        "400":
          $ref: '#/responses/400'
        "401":
          $ref: '#/responses/401'
        "403":
          $ref: '#/responses/403'
        "500":
          $ref: '#/responses/500'
  /events/{id}:
    parameters:
      - in: path
        name: id
        required: true
        description: Event ID.
        type: string
    get:
      summary: Read event
      description: Read an event by ID.
      tags:
        - Event
      operationId: readEvent
      security:
        - OAuth2:
            - public
            - event
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Event'
        "400":
          $ref: '#/responses/400'
        "401":
          $ref: '#/responses/401'
        "403":
          $ref: '#/responses/403'
        "404":
          $ref: '#/responses/404'
        "500":
          $ref: '#/responses/500'
    patch:
      summary: Update event
      description: Update an event by ID.
      tags:
        - Event
      operationId: updateEvent
      security:
        - OAuth2:
            - public
            - event
            - event:write
      parameters:
        - in: body
          name: event
          required: true
          description: Event to update.
          schema:
            $ref: '#/definitions/Event'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Event'
        "400":
          $ref: '#/responses/400'
        "401":
          $ref: '#/responses/401'
        "403":
          $ref: '#/responses/403'
        "404":
          $ref: '#/responses/404'
        "500":
          $ref: '#/responses/500'
    delete:
      summary: Delete event
      description: Delete an event by ID.
      tags:
        - Event
      operationId: deleteEvent
      security:
        - OAuth2:
            - public
            - event
            - event:write
      responses:
        "204":
          description: No Content
        "400":
          $ref: '#/responses/400'
        "401":
          $ref: '#/responses/401'
        "403":
          $ref: '#/responses/403'
        "404":
          $ref: '#/responses/404'
        "500":
          $ref: '#/responses/500'
  /events/{id}/users:
    parameters:
      - in: path
        name: id
        required: true
        description: Event ID.
        type: string
    get:
      summary: List event users
      description: List users subscribed to an event.
      tags:
        - Event
      operationId: listEventUsers
      security:
        - OAuth2:
            - public
            - event
            - user
      responses:
        "200":
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        "400":
          $ref: '#/responses/400'
        "401":
          $ref: '#/responses/401'
        "403":
          $ref: '#/responses/403'
        "404":
          $ref: '#/responses/404'
        "500":
          $ref: '#/responses/500'
  /events/{id}/types:
    parameters:
      - in: path
        name: id
        required: true
        description: Event ID.
        type: string
    get:
      summary: Get event type
      description: Get event type value.
      tags:
        - Event
      operationId: getEventType
      security:
        - OAuth2:
            - public
            - event
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/EventType'
        "400":
          $ref: '#/responses/400'
        "401":
          $ref: '#/responses/401'
        "403":
          $ref: '#/responses/403'
        "404":
          $ref: '#/responses/404'
        "500":
          $ref: '#/responses/500'
  /events/{eventID}/types/{typeID}:
    parameters:
      - in: path
        name: eventID
        required: true
        description: Event ID.
        type: string
      - in: path
        name: typeID
        required: true
        description: Category ID.
        type: string
    patch:
      summary: Set event type
      description: Set event type value.
      tags:
        - Event
      operationId: setEventType
      security:
        - OAuth2:
            - public
            - event
            - event:write
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Event'
        "400":
          $ref: '#/responses/400'
        "401":
          $ref: '#/responses/401'
        "403":
          $ref: '#/responses/403'
        "404":
          $ref: '#/responses/404'
        "500":
          $ref: '#/responses/500'
  /events/types:
    get:
      summary: List event types
      description: List all event categories.
      tags:
        - EventType
      operationId: listType
      security:
        - OAuth2:
            - public
            - event
      responses:
        "200":
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/EventType'
        "401":
          $ref: '#/responses/401'
        "403":
          $ref: '#/responses/403'
        "500":
          $ref: '#/responses/500'
    post:
      summary: Create event type
      description: Create a new event category.
      tags:
        - EventType
      operationId: createType
      security:
        - OAuth2:
            - public
            - event
            - event:write
      parameters:
        - in: body
          name: type
          required: true
          description: Event category to create.
          schema:
            $ref: '#/definitions/EventType'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/EventType'
        "400":
          $ref: '#/responses/400'
        "401":
          $ref: '#/responses/401'
        "403":
          $ref: '#/responses/403'
        "500":
          $ref: '#/responses/500'
  /events/types/{id}:
    parameters:
      - in: path
        name: id
        required: true
        description: ID of event category.
        type: string
    get:
      summary: Read event type
      description: Read an event category.
      tags:
        - EventType
      operationId: readType
      security:
        - OAuth2:
            - public
            - event
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/EventType'
        "400":
          $ref: '#/responses/400'
        "401":
          $ref: '#/responses/401'
        "403":
          $ref: '#/responses/403'
        "404":
          $ref: '#/responses/404'
        "500":
          $ref: '#/responses/500'
    patch:
      summary: Update event type
      description: Update an event category.
      tags:
        - EventType
      operationId: updateType
      security:
        - OAuth2:
            - public
            - event
            - event:write
      parameters:
        - in: body
          name: type
          required: true
          description: Event category to update.
          schema:
            $ref: '#/definitions/EventType'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/EventType'
        "400":
          $ref: '#/responses/400'
        "401":
          $ref: '#/responses/401'
        "403":
          $ref: '#/responses/403'
        "404":
          $ref: '#/responses/404'
        "500":
          $ref: '#/responses/500'
    delete:
      summary: Delete event type
      description: Update an event category.
      tags:
        - EventType
      operationId: deleteType
      security:
        - OAuth2:
            - public
            - event
            - event:write
      responses:
        "204":
          description: No content
        "400":
          $ref: '#/responses/400'
        "401":
          $ref: '#/responses/401'
        "403":
          $ref: '#/responses/403'
        "404":
          $ref: '#/responses/404'
        "500":
          $ref: '#/responses/500'
  /events/types/{id}/events/:
    parameters:
      - in: path
        name: id
        required: true
        description: ID of event category.
        type: string
    get:
      summary: List event type events
      description: List all events in a certain category.
      tags:
        - EventType
      operationId: listTypeEvents
      security:
        - OAuth2:
            - public
            - event
      responses:
        "200":
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Event'
        "400":
          $ref: '#/responses/400'
        "401":
          $ref: '#/responses/401'
        "403":
          $ref: '#/responses/403'
        "404":
          $ref: '#/responses/404'
        "500":
          $ref: '#/responses/500'
  /users:
    get:
      summary: List users
      description: List all users.
      tags:
        - User
      operationId: listUser
      security:
        - OAuth2:
            - public
      parameters:
        - in: query
          name: tutor
          description: Tutor filter.
          type: boolean
      responses:
        "200":
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        "401":
          $ref: '#/responses/401'
        "500":
          $ref: '#/responses/500'
    post:
      summary: Create user
      description: Create a new user.
      tags:
        - User
      operationId: createUser
      security:
        - OAuth2:
            - public
            - user
            - user:write
      parameters:
        - in: body
          name: user
          required: true
          description: User to create.
          schema:
            $ref: '#/definitions/User'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/User'
        "400":
          $ref: '#/responses/400'
        "401":
          $ref: '#/responses/401'
        "403":
          $ref: '#/responses/403'
        "500":
          $ref: '#/responses/500'
  /users/me:
    get:
      summary: Read authenticated user
      description: Read the authenticated user.
      tags:
        - User
      operationId: readMe
      security:
        - OAuth2:
            - public
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
        "401":
          $ref: '#/responses/401'
        "500":
          $ref: '#/responses/500'
    patch:
      summary: Update authenticated user
      description: Update the authenticated user.
      tags:
        - User
      operationId: updateMe
      security:
        - OAuth2:
            - public
      parameters:
        - in: body
          name: user
          required: true
          description: User to update.
          schema:
            $ref: '#/definitions/User'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
        "400":
          $ref: '#/responses/400'
        "401":
          $ref: '#/responses/401'
        "500":
          $ref: '#/responses/500'
    delete:
      summary: Delete authenticated user
      description: Delete the authenticated user.
      tags:
        - User
      operationId: deleteMe
      security:
        - OAuth2:
            - public
      responses:
        "204":
          description: No Content
        "401":
          $ref: '#/responses/401'
        "500":
          $ref: '#/responses/500'
  /users/me/events:
    get:
      summary: List authenticated user events
      description: List the authenticated user's subscribed events.
      tags:
        - User
      operationId: listMeEvents
      security:
        - OAuth2:
            - public
            - user
            - event
      responses:
        "200":
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Event'
        "401":
          $ref: '#/responses/401'
        "403":
          $ref: '#/responses/403'
        "500":
          $ref: '#/responses/500'
  /users/me/roles:
    get:
      summary: List authenticated user roles
      description: List the authenticated user's roles.
      tags:
        - User
      operationId: listMeRoles
      security:
        - OAuth2:
            - public
            - user
      responses:
        "200":
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Role'
        "401":
          $ref: '#/responses/401'
        "403":
          $ref: '#/responses/403'
        "500":
          $ref: '#/responses/500'
  /users/me/events/{id}:
    parameters:
      - in: path
        name: id
        required: true
        description: Event ID.
        type: string
    post:
      summary: Subscribe authenticated user
      description: Subscribe an authenticated user to an event.
      tags:
        - User
      operationId: subscribeMe
      security:
        - OAuth2:
            - public
            - user
            - user:subscription
            - event
      responses:
        "201":
          description: Created
          schema:
            type: array
            items:
              $ref: '#/definitions/Event'
        "400":
          $ref: '#/responses/400'
        "401":
          $ref: '#/responses/401'
        "403":
          $ref: '#/responses/403'
        "404":
          $ref: '#/responses/404'
        "500":
          $ref: '#/responses/500'
    delete:
      summary: Unsubscribe authenticated user
      description: Unsubscribe an authenticated user to an event.
      tags:
        - User
      operationId: unsubscribeMe
      security:
        - OAuth2:
            - public
            - user
            - user:subscription
            - event
      responses:
        "204":
          description: No Content
        "400":
          $ref: '#/responses/400'
        "401":
          $ref: '#/responses/401'
        "403":
          $ref: '#/responses/403'
        "404":
          $ref: '#/responses/404'
        "500":
          $ref: '#/responses/500'
  /users/{id}:
    parameters:
      - in: path
        name: id
        required: true
        description: User ID.
        type: string
    get:
      summary: Read user
      description: Read an user by ID.
      tags:
        - User
      operationId: readUser
      security:
        - OAuth2:
            - public
            - user
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
        "400":
          $ref: '#/responses/400'
        "401":
          $ref: '#/responses/401'
        "403":
          $ref: '#/responses/403'
        "404":
          $ref: '#/responses/404'
        "500":
          $ref: '#/responses/500'
    patch:
      summary: Update user
      description: Update an user by ID.
      tags:
        - User
      operationId: updateUser
      security:
        - OAuth2:
            - public
            - user
            - user:write
      parameters:
        - in: body
          name: user
          required: true
          description: User to update.
          schema:
            $ref: '#/definitions/User'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
        "400":
          $ref: '#/responses/400'
        "401":
          $ref: '#/responses/401'
        "403":
          $ref: '#/responses/403'
        "404":
          $ref: '#/responses/404'
        "500":
          $ref: '#/responses/500'
    delete:
      summary: Delete user
      description: Delete an user by ID.
      tags:
        - User
      operationId: deleteUser
      security:
        - OAuth2:
            - public
            - user
            - user:write
      responses:
        "204":
          description: No Content
        "400":
          $ref: '#/responses/400'
        "401":
          $ref: '#/responses/401'
        "403":
          $ref: '#/responses/403'
        "404":
          $ref: '#/responses/404'
        "500":
          $ref: '#/responses/500'
  /users/{id}/events:
    parameters:
      - in: path
        name: id
        required: true
        description: User ID.
        type: string
    get:
      summary: List user events
      description: List user's subscribed events.
      tags:
        - User
      operationId: listUserEvents
      security:
        - OAuth2:
            - public
            - user
            - event
      responses:
        "200":
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Event'
        "400":
          $ref: '#/responses/400'
        "401":
          $ref: '#/responses/401'
        "403":
          $ref: '#/responses/403'
        "404":
          $ref: '#/responses/404'
        "500":
          $ref: '#/responses/500'
  /users/{id}/roles:
    parameters:
      - in: path
        name: id
        required: true
        description: User ID.
        type: string
    get:
      summary: List user roles
      description: List the user's roles.
      tags:
        - User
      operationId: listUserRoles
      security:
        - OAuth2:
            - public
            - user
      responses:
        "200":
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Role'
        "400":
          $ref: '#/responses/400'
        "401":
          $ref: '#/responses/401'
        "403":
          $ref: '#/responses/403'
        "404":
          $ref: '#/responses/404'
        "500":
          $ref: '#/responses/500'
  /users/{userId}/events/{eventId}:
    parameters:
      - in: path
        name: userId
        required: true
        description: User ID.
        type: string
      - in: path
        name: eventId
        required: true
        description: Event ID.
        type: string
    post:
      summary: Subscribe user
      description: Subscribe a user to an event.
      tags:
        - User
      operationId: subscribeUser
      security:
        - OAuth2:
            - public
            - user
            - user:subscription
            - user:write
            - event
      responses:
        "201":
          description: Created
          schema:
            type: array
            items:
              $ref: '#/definitions/Event'
        "400":
          $ref: '#/responses/400'
        "401":
          $ref: '#/responses/401'
        "403":
          $ref: '#/responses/403'
        "404":
          $ref: '#/responses/404'
        "500":
          $ref: '#/responses/500'
    delete:
      summary: Unsubscribe user
      description: Unsubscribe a user to an event.
      tags:
        - User
      operationId: unsubscribeUser
      security:
        - OAuth2:
            - public
            - user
            - user:subscription
            - user:write
            - event
      responses:
        "204":
          description: No Content
        "400":
          $ref: '#/responses/400'
        "401":
          $ref: '#/responses/401'
        "403":
          $ref: '#/responses/403'
        "404":
          $ref: '#/responses/404'
        "500":
          $ref: '#/responses/500'
  /users/{id}/role/tutor:
    parameters:
      - in: path
        name: id
        required: true
        description: User ID.
        type: string
    post:
      summary: Add tutor
      description: Add tutor role to a user.
      tags:
        - Role
      operationId: addTutor
      security:
        - OAuth2:
            - public
            - user
            - user:write
      responses:
        "201":
          description: Created
          schema:
            type: array
            items:
              $ref: '#/definitions/Role'
        "400":
          $ref: '#/responses/400'
        "401":
          $ref: '#/responses/401'
        "403":
          $ref: '#/responses/403'
        "404":
          $ref: '#/responses/404'
        "500":
          $ref: '#/responses/500'
    delete:
      summary: Remove tutor
      description: Remove tutor role to a user.
      tags:
        - Role
      operationId: removeTutor
      security:
        - OAuth2:
            - public
            - user
            - user:write
      responses:
        "204":
          description: No Content
        "400":
          $ref: '#/responses/400'
        "401":
          $ref: '#/responses/401'
        "403":
          $ref: '#/responses/403'
        "404":
          $ref: '#/responses/404'
        "500":
          $ref: '#/responses/500'
  /users/{id}/role/calendar:
    parameters:
      - in: path
        name: id
        required: true
        description: User ID.
        type: string
    post:
      summary: Add calendar
      description: Add calendar role to a user.
      tags:
        - Role
      operationId: addCalendar
      security:
        - OAuth2:
            - public
            - user
            - user:write
      responses:
        "201":
          description: Created
          schema:
            type: array
            items:
              $ref: '#/definitions/Role'
        "400":
          $ref: '#/responses/400'
        "401":
          $ref: '#/responses/401'
        "403":
          $ref: '#/responses/403'
        "404":
          $ref: '#/responses/404'
        "500":
          $ref: '#/responses/500'
    delete:
      summary: Remove calendar
      description: Remove calendar role to a user.
      tags:
        - Role
      operationId: removeCalendar
      security:
        - OAuth2:
            - public
            - user
            - user:write
      responses:
        "204":
          description: No Content
        "400":
          $ref: '#/responses/400'
        "401":
          $ref: '#/responses/401'
        "403":
          $ref: '#/responses/403'
        "404":
          $ref: '#/responses/404'
        "500":
          $ref: '#/responses/500'
  /users/{id}/role/admin:
    parameters:
      - in: path
        name: id
        required: true
        description: User ID.
        type: string
    post:
      summary: Add admin
      description: Add admin role to a user.
      tags:
        - Role
      operationId: addAdmin
      security:
        - OAuth2:
            - public
            - user
            - user:write
      responses:
        "201":
          description: Created
          schema:
            type: array
            items:
              $ref: '#/definitions/Role'
        "400":
          $ref: '#/responses/400'
        "401":
          $ref: '#/responses/401'
        "403":
          $ref: '#/responses/403'
        "404":
          $ref: '#/responses/404'
        "500":
          $ref: '#/responses/500'
    delete:
      summary: Remove admin
      description: Remove admin role to a user.
      tags:
        - Role
      operationId: removeAdmin
      security:
        - OAuth2:
            - public
            - user
            - user:write
      responses:
        "204":
          description: No Content
        "400":
          $ref: '#/responses/400'
        "401":
          $ref: '#/responses/401'
        "403":
          $ref: '#/responses/403'
        "404":
          $ref: '#/responses/404'
        "500":
          $ref: '#/responses/500'
responses:
  400:
    description: Bad request
    schema:
      $ref: '#/definitions/Error'
  401:
    description: Unauthorized
    schema:
      $ref: '#/definitions/Error'
  403:
    description: Forbidden
    schema:
      $ref: '#/definitions/Error'
  404:
    description: Not Found
    schema:
      $ref: '#/definitions/Error'
  422:
    description: Unprocessable Entity
    schema:
      $ref: '#/definitions/Error'
  500:
    description: Internal Server Error
    schema:
      $ref: '#/definitions/Error'
definitions:
  Event:
    type: object
    required:
      - createdAt
      - endAt
      - id
      - name
      - startAt
    properties:
      category:
        $ref: '#/definitions/EventType'
      createdAt:
        type: string
        format: date-time
      description:
        type: string
      endAt:
        type: string
        format: date-time
      id:
        type: string
      name:
        type: string
      startAt:
        type: string
        format: date-time
      tutorsRequired:
        type: integer
        format: int64
      users:
        type: array
        items:
          $ref: '#/definitions/User'
      walletsReward:
        type: integer
        format: int64
    x-go-type:
      type: Event
      import:
        package: github.com/gmarcha/ent-goswagger-app/internal/ent
  EventType:
    type: object
    required:
      - color
      - id
      - name
    properties:
      color:
        type: string
      events:
        type: array
        items:
          $ref: '#/definitions/Event'
      id:
        type: string
      name:
        type: string
    x-go-type:
      type: EventType
      import:
        package: github.com/gmarcha/ent-goswagger-app/internal/ent
  User:
    type: object
    required:
      - id
      - login
    properties:
      displayName:
        type: string
      events:
        type: array
        items:
          $ref: '#/definitions/Event'
      firstName:
        type: string
      id:
        type: string
      imagePath:
        type: string
      lastName:
        type: string
      login:
        type: string
      roles:
        type: array
        items:
          $ref: '#/definitions/Role'
    x-go-type:
      type: User
      import:
        package: github.com/gmarcha/ent-goswagger-app/internal/ent
  Role:
    type: object
    required:
      - event
      - event_write
      - id
      - name
      - user
      - user_subscription
      - user_write
    properties:
      event:
        type: string
      event_write:
        type: string
      id:
        type: string
      name:
        type: string
      user:
        type: string
      user_subscription:
        type: string
      user_write:
        type: string
      users:
        type: array
        items:
          $ref: '#/definitions/User'
    x-go-type:
      type: Role
      import:
        package: github.com/gmarcha/ent-goswagger-app/internal/ent
  Token:
    type: object
    properties:
      accessToken:
        type: string
      refreshToken:
        type: string
      expiresAt:
        type: string
        format: date-time
      issuedAt:
        type: string
        format: date-time
  TokenInfo:
    type: object
    properties:
      expiresAt:
        type: string
        format: date-time
      issuedAt:
        type: string
        format: date-time
      login:
        type: string
        description: username
      roles:
        type: array
        items:
          type: string
  Error:
    type: object
    properties:
      code:
        type: integer
        example: 500
      status:
        type: string
        example: Internal Server Error
      message:
        type: string
        example: Explicit error message
    required:
      - code
      - status
      - message
  principal:
    type: string
